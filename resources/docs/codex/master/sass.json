[
    {
        "description": "Create a loader\n",
        "commentRange": {
            "start": 6,
            "end": 11
        },
        "context": {
            "type": "mixin",
            "name": "createLoader",
            "code": "\n\n    .loader-#{$name} {\n        width: 100px;\n        height: 100px;\n        background-color: $color;\n        margin: $margin;\n        animation: loader-#{$name}-animation $speed infinite ease-in-out;\n    }\n\n    @keyframes loader-#{$name}-animation {\n        0% {\n            transform: perspective(120px) rotateX(0deg) rotateY(0deg);\n        } 50% {\n              transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);\n          } 100% {\n                transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\n            }\n    }\n\n",
            "line": {
                "start": 12,
                "end": 32
            }
        },
        "parameter": [
            {
                "type": "string",
                "name": "name",
                "description": "The name of zeh loadah"
            },
            {
                "type": "color",
                "name": "color",
                "default": "#333333",
                "description": "The color of zeh lodah"
            },
            {
                "type": "dimension",
                "name": "color",
                "default": "#333333",
                "description": "The color of zeh lodah"
            },
            {
                "type": "dimension",
                "name": "margin",
                "default": "40px auto",
                "description": "The color of zeh lodah"
            },
            {
                "type": "time",
                "name": "speed",
                "default": "2.0s",
                "description": "The color of zeh lodah"
            }
        ],
        "author": [
            "Robin Radic"
        ],
        "group": [
            "components"
        ],
        "access": "public",
        "require": [],
        "file": {
            "path": "components/mixins/_loader.scss",
            "name": "_loader.scss"
        },
        "usedBy": [
            {
                "description": "Make a loader\n",
                "context": {
                    "type": "mixin",
                    "name": "makeLoader",
                    "code": "\n    .#{$name}-loader{\n        display: none;\n    }\n\n    .#{$name}-loading{\n        @include createLoader($name, $page-loader-color, $page-loader-size, $page-loader-margin, $page-loader-speed);\n\n        .#{$name}-loader{\n            display: block;\n        }\n\n        @content\n    }\n",
                    "line": {
                        "start": 36,
                        "end": 50
                    }
                }
            }
        ]
    },
    {
        "description": "Make a loader\n",
        "commentRange": {
            "start": 34,
            "end": 35
        },
        "context": {
            "type": "mixin",
            "name": "makeLoader",
            "code": "\n    .#{$name}-loader{\n        display: none;\n    }\n\n    .#{$name}-loading{\n        @include createLoader($name, $page-loader-color, $page-loader-size, $page-loader-margin, $page-loader-speed);\n\n        .#{$name}-loader{\n            display: block;\n        }\n\n        @content\n    }\n",
            "line": {
                "start": 36,
                "end": 50
            }
        },
        "parameter": [
            {
                "type": "string",
                "name": "name",
                "description": "The name of zeh loadah"
            }
        ],
        "author": [
            "Robin Radic"
        ],
        "group": [
            "components"
        ],
        "access": "public",
        "content": "",
        "require": [
            {
                "type": "mixin",
                "name": "createLoader"
            }
        ],
        "file": {
            "path": "components/mixins/_loader.scss",
            "name": "_loader.scss"
        }
    },
    {
        "description": "Create a table row variant\n",
        "commentRange": {
            "start": 7,
            "end": 10
        },
        "context": {
            "type": "mixin",
            "name": "table-row-variant",
            "code": "\n    // Exact selectors below required to override `.table-striped` and prevent\n    // inheritance to nested tables.\n\n    .table > thead > tr,\n    .table > tbody > tr,\n    .table > tfoot > tr {\n        > td.#{$state},\n        > th.#{$state},\n        &.#{$state} > td,\n        &.#{$state} > th {\n            background: $background;\n            @if $text != false {\n                color: $text;\n            }\n        }\n    }\n\n    // Hover states for `.table-hover`\n    // Note: this is not available for cells or rows within `thead` or `tfoot`.\n    .table-hover > tbody > tr {\n        > td.#{$state}:hover,\n        > th.#{$state}:hover,\n        &.#{$state}:hover > td,\n        &.#{$state}:hover > th {\n            background: darken($background, 5%);\n        }\n    }\n",
            "line": {
                "start": 11,
                "end": 39
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "state",
                "description": "The state (class name)"
            },
            {
                "type": "Background",
                "name": "background",
                "description": "The background property value"
            },
            {
                "type": "Color",
                "name": "test",
                "description": "The color of the text"
            }
        ],
        "author": [
            "Robin Radic"
        ],
        "group": [
            "components"
        ],
        "access": "public",
        "require": [],
        "file": {
            "path": "components/mixins/_tables.scss",
            "name": "_tables.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 67,
            "end": 67
        },
        "context": {
            "type": "css",
            "name": "// 3. Layout\n///**************************/\n//\n@import 'layout/print';\n@import 'layout/header';\n@import 'layout/page-container';\n@import 'layout/sidebar';\n@import 'layout/content';\n@import 'layout/footer';\n\n.page-header",
            "value": ".page-logo > .logo-default {\n        margin: 19px 10px 0 10px !important;\n    }",
            "line": {
                "start": 78,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 69,
            "end": 69
        },
        "context": {
            "type": "css",
            "name": "//\n@import 'layout/print';\n@import 'layout/header';\n@import 'layout/page-container';\n@import 'layout/sidebar';\n@import 'layout/content';\n@import 'layout/footer';\n\n.page-header",
            "value": ".page-logo > .logo-default {\n        margin: 19px 10px 0 10px !important;\n    }",
            "line": {
                "start": 78,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 13,
            "end": 13
        },
        "context": {
            "type": "css",
            "name": "// 1. Base\n///**************************/\n//\n@import \"base\";\n@import url($web-font);\n@import \"../../bower_components/font-awesome/scss/font-awesome\";\n//\n///**************************/\n// 2. Bootstrap\n///**************************/\n//\n// Reset and dependencies\n@import \"../../bower_components/bootstrap/scss/normalize\";\n@import \"../../bower_components/bootstrap/scss/print\";\n// Core CSS\n@import \"../../bower_components/bootstrap/scss/reboot\";\n@import \"../../bower_components/bootstrap/scss/type\";\n@import \"../../bower_components/bootstrap/scss/images\";\n@import \"../../bower_components/bootstrap/scss/code\";\n@import \"../../bower_components/bootstrap/scss/grid\";\n@import \"../../bower_components/bootstrap/scss/tables\";\n@import \"../../bower_components/bootstrap/scss/forms\";\n@import \"../../bower_components/bootstrap/scss/buttons\";\n// // Components\n@import \"../../bower_components/bootstrap/scss/animation\";\n@import \"../../bower_components/bootstrap/scss/dropdown\";\n@import \"../../bower_components/bootstrap/scss/button-group\";\n@import \"../../bower_components/bootstrap/scss/input-group\";\n@import \"../../bower_components/bootstrap/scss/custom-forms\";\n@import \"../../bower_components/bootstrap/scss/nav\";\n@import \"../../bower_components/bootstrap/scss/navbar\";\n@import \"../../bower_components/bootstrap/scss/card\";\n@import \"../../bower_components/bootstrap/scss/breadcrumb\";\n@import \"../../bower_components/bootstrap/scss/pagination\";\n@import \"../../bower_components/bootstrap/scss/pager\";\n@import \"../../bower_components/bootstrap/scss/labels\";\n@import \"../../bower_components/bootstrap/scss/jumbotron\";\n@import \"../../bower_components/bootstrap/scss/alert\";\n@import \"../../bower_components/bootstrap/scss/progress\";\n@import \"../../bower_components/bootstrap/scss/media\";\n@import \"../../bower_components/bootstrap/scss/list-group\";\n@import \"../../bower_components/bootstrap/scss/responsive-embed\";\n@import \"../../bower_components/bootstrap/scss/close\";\n// Components w/ JavaScript\n@import \"../../bower_components/bootstrap/scss/modal\";\n@import \"../../bower_components/bootstrap/scss/tooltip\";\n@import \"../../bower_components/bootstrap/scss/popover\";\n@import \"../../bower_components/bootstrap/scss/carousel\";\n// Utility classes\n@import \"../../bower_components/bootstrap/scss/utilities\";\n@import \"../../bower_components/bootstrap/scss/utilities-spacing\";\n@import \"../../bower_components/bootstrap/scss/utilities-responsive\";\n//\n///**************************/\n// 3. Layout\n///**************************/\n//\n@import 'layout/print';\n@import 'layout/header';\n@import 'layout/page-container';\n@import 'layout/sidebar';\n@import 'layout/content';\n@import 'layout/footer';\n\n.page-header",
            "value": ".page-logo > .logo-default {\n        margin: 19px 10px 0 10px !important;\n    }",
            "line": {
                "start": 78,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 23,
            "end": 23
        },
        "context": {
            "type": "css",
            "name": "//\n// Reset and dependencies\n@import \"../../bower_components/bootstrap/scss/normalize\";\n@import \"../../bower_components/bootstrap/scss/print\";\n// Core CSS\n@import \"../../bower_components/bootstrap/scss/reboot\";\n@import \"../../bower_components/bootstrap/scss/type\";\n@import \"../../bower_components/bootstrap/scss/images\";\n@import \"../../bower_components/bootstrap/scss/code\";\n@import \"../../bower_components/bootstrap/scss/grid\";\n@import \"../../bower_components/bootstrap/scss/tables\";\n@import \"../../bower_components/bootstrap/scss/forms\";\n@import \"../../bower_components/bootstrap/scss/buttons\";\n// // Components\n@import \"../../bower_components/bootstrap/scss/animation\";\n@import \"../../bower_components/bootstrap/scss/dropdown\";\n@import \"../../bower_components/bootstrap/scss/button-group\";\n@import \"../../bower_components/bootstrap/scss/input-group\";\n@import \"../../bower_components/bootstrap/scss/custom-forms\";\n@import \"../../bower_components/bootstrap/scss/nav\";\n@import \"../../bower_components/bootstrap/scss/navbar\";\n@import \"../../bower_components/bootstrap/scss/card\";\n@import \"../../bower_components/bootstrap/scss/breadcrumb\";\n@import \"../../bower_components/bootstrap/scss/pagination\";\n@import \"../../bower_components/bootstrap/scss/pager\";\n@import \"../../bower_components/bootstrap/scss/labels\";\n@import \"../../bower_components/bootstrap/scss/jumbotron\";\n@import \"../../bower_components/bootstrap/scss/alert\";\n@import \"../../bower_components/bootstrap/scss/progress\";\n@import \"../../bower_components/bootstrap/scss/media\";\n@import \"../../bower_components/bootstrap/scss/list-group\";\n@import \"../../bower_components/bootstrap/scss/responsive-embed\";\n@import \"../../bower_components/bootstrap/scss/close\";\n// Components w/ JavaScript\n@import \"../../bower_components/bootstrap/scss/modal\";\n@import \"../../bower_components/bootstrap/scss/tooltip\";\n@import \"../../bower_components/bootstrap/scss/popover\";\n@import \"../../bower_components/bootstrap/scss/carousel\";\n// Utility classes\n@import \"../../bower_components/bootstrap/scss/utilities\";\n@import \"../../bower_components/bootstrap/scss/utilities-spacing\";\n@import \"../../bower_components/bootstrap/scss/utilities-responsive\";\n//\n///**************************/\n// 3. Layout\n///**************************/\n//\n@import 'layout/print';\n@import 'layout/header';\n@import 'layout/page-container';\n@import 'layout/sidebar';\n@import 'layout/content';\n@import 'layout/footer';\n\n.page-header",
            "value": ".page-logo > .logo-default {\n        margin: 19px 10px 0 10px !important;\n    }",
            "line": {
                "start": 78,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 15,
            "end": 15
        },
        "context": {
            "type": "css",
            "name": "//\n@import \"base\";\n@import url($web-font);\n@import \"../../bower_components/font-awesome/scss/font-awesome\";\n//\n///**************************/\n// 2. Bootstrap\n///**************************/\n//\n// Reset and dependencies\n@import \"../../bower_components/bootstrap/scss/normalize\";\n@import \"../../bower_components/bootstrap/scss/print\";\n// Core CSS\n@import \"../../bower_components/bootstrap/scss/reboot\";\n@import \"../../bower_components/bootstrap/scss/type\";\n@import \"../../bower_components/bootstrap/scss/images\";\n@import \"../../bower_components/bootstrap/scss/code\";\n@import \"../../bower_components/bootstrap/scss/grid\";\n@import \"../../bower_components/bootstrap/scss/tables\";\n@import \"../../bower_components/bootstrap/scss/forms\";\n@import \"../../bower_components/bootstrap/scss/buttons\";\n// // Components\n@import \"../../bower_components/bootstrap/scss/animation\";\n@import \"../../bower_components/bootstrap/scss/dropdown\";\n@import \"../../bower_components/bootstrap/scss/button-group\";\n@import \"../../bower_components/bootstrap/scss/input-group\";\n@import \"../../bower_components/bootstrap/scss/custom-forms\";\n@import \"../../bower_components/bootstrap/scss/nav\";\n@import \"../../bower_components/bootstrap/scss/navbar\";\n@import \"../../bower_components/bootstrap/scss/card\";\n@import \"../../bower_components/bootstrap/scss/breadcrumb\";\n@import \"../../bower_components/bootstrap/scss/pagination\";\n@import \"../../bower_components/bootstrap/scss/pager\";\n@import \"../../bower_components/bootstrap/scss/labels\";\n@import \"../../bower_components/bootstrap/scss/jumbotron\";\n@import \"../../bower_components/bootstrap/scss/alert\";\n@import \"../../bower_components/bootstrap/scss/progress\";\n@import \"../../bower_components/bootstrap/scss/media\";\n@import \"../../bower_components/bootstrap/scss/list-group\";\n@import \"../../bower_components/bootstrap/scss/responsive-embed\";\n@import \"../../bower_components/bootstrap/scss/close\";\n// Components w/ JavaScript\n@import \"../../bower_components/bootstrap/scss/modal\";\n@import \"../../bower_components/bootstrap/scss/tooltip\";\n@import \"../../bower_components/bootstrap/scss/popover\";\n@import \"../../bower_components/bootstrap/scss/carousel\";\n// Utility classes\n@import \"../../bower_components/bootstrap/scss/utilities\";\n@import \"../../bower_components/bootstrap/scss/utilities-spacing\";\n@import \"../../bower_components/bootstrap/scss/utilities-responsive\";\n//\n///**************************/\n// 3. Layout\n///**************************/\n//\n@import 'layout/print';\n@import 'layout/header';\n@import 'layout/page-container';\n@import 'layout/sidebar';\n@import 'layout/content';\n@import 'layout/footer';\n\n.page-header",
            "value": ".page-logo > .logo-default {\n        margin: 19px 10px 0 10px !important;\n    }",
            "line": {
                "start": 78,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 21,
            "end": 21
        },
        "context": {
            "type": "css",
            "name": "// 2. Bootstrap\n///**************************/\n//\n// Reset and dependencies\n@import \"../../bower_components/bootstrap/scss/normalize\";\n@import \"../../bower_components/bootstrap/scss/print\";\n// Core CSS\n@import \"../../bower_components/bootstrap/scss/reboot\";\n@import \"../../bower_components/bootstrap/scss/type\";\n@import \"../../bower_components/bootstrap/scss/images\";\n@import \"../../bower_components/bootstrap/scss/code\";\n@import \"../../bower_components/bootstrap/scss/grid\";\n@import \"../../bower_components/bootstrap/scss/tables\";\n@import \"../../bower_components/bootstrap/scss/forms\";\n@import \"../../bower_components/bootstrap/scss/buttons\";\n// // Components\n@import \"../../bower_components/bootstrap/scss/animation\";\n@import \"../../bower_components/bootstrap/scss/dropdown\";\n@import \"../../bower_components/bootstrap/scss/button-group\";\n@import \"../../bower_components/bootstrap/scss/input-group\";\n@import \"../../bower_components/bootstrap/scss/custom-forms\";\n@import \"../../bower_components/bootstrap/scss/nav\";\n@import \"../../bower_components/bootstrap/scss/navbar\";\n@import \"../../bower_components/bootstrap/scss/card\";\n@import \"../../bower_components/bootstrap/scss/breadcrumb\";\n@import \"../../bower_components/bootstrap/scss/pagination\";\n@import \"../../bower_components/bootstrap/scss/pager\";\n@import \"../../bower_components/bootstrap/scss/labels\";\n@import \"../../bower_components/bootstrap/scss/jumbotron\";\n@import \"../../bower_components/bootstrap/scss/alert\";\n@import \"../../bower_components/bootstrap/scss/progress\";\n@import \"../../bower_components/bootstrap/scss/media\";\n@import \"../../bower_components/bootstrap/scss/list-group\";\n@import \"../../bower_components/bootstrap/scss/responsive-embed\";\n@import \"../../bower_components/bootstrap/scss/close\";\n// Components w/ JavaScript\n@import \"../../bower_components/bootstrap/scss/modal\";\n@import \"../../bower_components/bootstrap/scss/tooltip\";\n@import \"../../bower_components/bootstrap/scss/popover\";\n@import \"../../bower_components/bootstrap/scss/carousel\";\n// Utility classes\n@import \"../../bower_components/bootstrap/scss/utilities\";\n@import \"../../bower_components/bootstrap/scss/utilities-spacing\";\n@import \"../../bower_components/bootstrap/scss/utilities-responsive\";\n//\n///**************************/\n// 3. Layout\n///**************************/\n//\n@import 'layout/print';\n@import 'layout/header';\n@import 'layout/page-container';\n@import 'layout/sidebar';\n@import 'layout/content';\n@import 'layout/footer';\n\n.page-header",
            "value": ".page-logo > .logo-default {\n        margin: 19px 10px 0 10px !important;\n    }",
            "line": {
                "start": 78,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 87,
            "end": 87
        },
        "context": {
            "type": "css",
            "name": "//\n@import \"plugins/noty\";\n@import \"plugins/slimscroll\";\n@import \"plugins/sass-material-colors-classes\";\n@import \"plugins/mCustomScrollbar\";\n//@import \"plugins/jstree2\";\n//@import \"plugins/spectrum\";\n//@import \"plugins/bootstrap3-editable\";\n//@import \"plugins/bootstrap-switch\";\n//@import \"plugins/bootstrap3-xeditable\";\n//@import \"plugins/select2\";\n\n.bg-color-white",
            "value": "background-color: #ffffff !important;",
            "line": {
                "start": 100,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 85,
            "end": 85
        },
        "context": {
            "type": "css",
            "name": "// 4. Plugins\n///**************************/\n//\n@import \"plugins/noty\";\n@import \"plugins/slimscroll\";\n@import \"plugins/sass-material-colors-classes\";\n@import \"plugins/mCustomScrollbar\";\n//@import \"plugins/jstree2\";\n//@import \"plugins/spectrum\";\n//@import \"plugins/bootstrap3-editable\";\n//@import \"plugins/bootstrap-switch\";\n//@import \"plugins/bootstrap3-xeditable\";\n//@import \"plugins/select2\";\n\n.bg-color-white",
            "value": "background-color: #ffffff !important;",
            "line": {
                "start": 100,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 109,
            "end": 109
        },
        "context": {
            "type": "css",
            "name": "// 5. Components\n///**************************/\n//\n@import \"components/grid\";\n@import \"components/styler\";\n@import \"components/loader\";\n@import \"components/typography\";\n@import \"components/list-group\";\n@import \"components/code\";\n@import \"components/dropdown\";\n@import \"components/popover\";\n@import \"components/buttons\";\n@import \"components/navs\";\n@import \"components/labels\";\n@import \"components/tables\";\n@import \"components/tooltip\";\n@import \"components/code-block\";\n//@import \"components/ibox\";\n@import \"components/progressbar\";\n\n//@import \"components/preferences\";\n//@import \"components/quick_sidebar\";\n//@import \"components/form-inputs-material\";\n\n\n//\n///**************************/\n// 6. Utilities\n///**************************/\n//\n@import \"utilities/positioning\";\n@import \"scss-json\";\n\n\n\n\n.page-content-inner p",
            "value": "font-size: 14px;",
            "line": {
                "start": 146,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 136,
            "end": 136
        },
        "context": {
            "type": "css",
            "name": "// 6. Utilities\n///**************************/\n//\n@import \"utilities/positioning\";\n@import \"scss-json\";\n\n\n\n\n.page-content-inner p",
            "value": "font-size: 14px;",
            "line": {
                "start": 146,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 138,
            "end": 138
        },
        "context": {
            "type": "css",
            "name": "//\n@import \"utilities/positioning\";\n@import \"scss-json\";\n\n\n\n\n.page-content-inner p",
            "value": "font-size: 14px;",
            "line": {
                "start": 146,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "**************************/\n",
        "commentRange": {
            "start": 111,
            "end": 111
        },
        "context": {
            "type": "css",
            "name": "//\n@import \"components/grid\";\n@import \"components/styler\";\n@import \"components/loader\";\n@import \"components/typography\";\n@import \"components/list-group\";\n@import \"components/code\";\n@import \"components/dropdown\";\n@import \"components/popover\";\n@import \"components/buttons\";\n@import \"components/navs\";\n@import \"components/labels\";\n@import \"components/tables\";\n@import \"components/tooltip\";\n@import \"components/code-block\";\n//@import \"components/ibox\";\n@import \"components/progressbar\";\n\n//@import \"components/preferences\";\n//@import \"components/quick_sidebar\";\n//@import \"components/form-inputs-material\";\n\n\n//\n///**************************/\n// 6. Utilities\n///**************************/\n//\n@import \"utilities/positioning\";\n@import \"scss-json\";\n\n\n\n\n.page-content-inner p",
            "value": "font-size: 14px;",
            "line": {
                "start": 146,
                "end": 196
            }
        },
        "group": [
            "stylesheet"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "file": {
            "path": "stylesheet.scss",
            "name": "stylesheet.scss"
        }
    },
    {
        "description": "Check if the given value is a number\n",
        "commentRange": {
            "start": 7,
            "end": 9
        },
        "context": {
            "type": "function",
            "name": "is-number",
            "code": "\n    @return type-of($value) == 'number';\n",
            "line": {
                "start": 10,
                "end": 12
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        },
        "usedBy": [
            {
                "description": "Check if the given value is a time ('ms' 's')\n",
                "context": {
                    "type": "function",
                    "name": "is-time",
                    "code": "\n    @return is-number($value) and index('ms' 's', unit($value)) != null;\n",
                    "line": {
                        "start": 17,
                        "end": 19
                    }
                }
            },
            {
                "description": "Check if the given value is a angle ('deg' 'rad' 'grad' 'turn')\n",
                "context": {
                    "type": "function",
                    "name": "is-angle",
                    "code": "\n    @return is-number($value) and index('deg' 'rad' 'grad' 'turn', unit($value)) != null;\n",
                    "line": {
                        "start": 31,
                        "end": 33
                    }
                }
            },
            {
                "description": "Check if the given value is a frequency ('Hz' 'kHz')\n",
                "context": {
                    "type": "function",
                    "name": "is-frequency",
                    "code": "\n    @return is-number($value) and index('Hz' 'kHz', unit($value)) != null;\n",
                    "line": {
                        "start": 38,
                        "end": 40
                    }
                }
            },
            {
                "description": "Check if the given value is a integer\n",
                "context": {
                    "type": "function",
                    "name": "is-integer",
                    "code": "\n    @return is-number($value) and round($value) == $value;\n",
                    "line": {
                        "start": 45,
                        "end": 47
                    }
                }
            },
            {
                "description": "Check if the given value is a number('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax')\n",
                "context": {
                    "type": "function",
                    "name": "is-relative-length",
                    "code": "\n    @return is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;\n",
                    "line": {
                        "start": 52,
                        "end": 54
                    }
                }
            },
            {
                "description": "Check if the given value is a absolute length ('cm' 'mm' 'in' 'px' 'pt' 'pc')\n",
                "context": {
                    "type": "function",
                    "name": "is-absolute-length",
                    "code": "\n    @return is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;\n",
                    "line": {
                        "start": 59,
                        "end": 61
                    }
                }
            },
            {
                "description": "Check if the given value is a percentage\n",
                "context": {
                    "type": "function",
                    "name": "is-percentage",
                    "code": "\n    @return is-number($value) and unit($value) == '%';\n",
                    "line": {
                        "start": 66,
                        "end": 68
                    }
                }
            },
            {
                "description": "Check if the given value is a resolution ('dpi' 'dpcm' 'dppx')\n",
                "context": {
                    "type": "function",
                    "name": "is-resolution",
                    "code": "\n    @return is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;\n",
                    "line": {
                        "start": 80,
                        "end": 82
                    }
                }
            }
        ]
    },
    {
        "description": "Check if the given value is a time ('ms' 's')\n",
        "commentRange": {
            "start": 14,
            "end": 16
        },
        "context": {
            "type": "function",
            "name": "is-time",
            "code": "\n    @return is-number($value) and index('ms' 's', unit($value)) != null;\n",
            "line": {
                "start": 17,
                "end": 19
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-number"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        },
        "usedBy": [
            {
                "description": "Check if the given value is a duration\n",
                "context": {
                    "type": "function",
                    "name": "is-duration",
                    "code": "\n    @return is-time($value);\n",
                    "line": {
                        "start": 24,
                        "end": 26
                    }
                }
            }
        ]
    },
    {
        "description": "Check if the given value is a duration\n",
        "commentRange": {
            "start": 21,
            "end": 23
        },
        "context": {
            "type": "function",
            "name": "is-duration",
            "code": "\n    @return is-time($value);\n",
            "line": {
                "start": 24,
                "end": 26
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-time"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        }
    },
    {
        "description": "Check if the given value is a angle ('deg' 'rad' 'grad' 'turn')\n",
        "commentRange": {
            "start": 28,
            "end": 30
        },
        "context": {
            "type": "function",
            "name": "is-angle",
            "code": "\n    @return is-number($value) and index('deg' 'rad' 'grad' 'turn', unit($value)) != null;\n",
            "line": {
                "start": 31,
                "end": 33
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-number"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        }
    },
    {
        "description": "Check if the given value is a frequency ('Hz' 'kHz')\n",
        "commentRange": {
            "start": 35,
            "end": 37
        },
        "context": {
            "type": "function",
            "name": "is-frequency",
            "code": "\n    @return is-number($value) and index('Hz' 'kHz', unit($value)) != null;\n",
            "line": {
                "start": 38,
                "end": 40
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-number"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        }
    },
    {
        "description": "Check if the given value is a integer\n",
        "commentRange": {
            "start": 42,
            "end": 44
        },
        "context": {
            "type": "function",
            "name": "is-integer",
            "code": "\n    @return is-number($value) and round($value) == $value;\n",
            "line": {
                "start": 45,
                "end": 47
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-number"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        }
    },
    {
        "description": "Check if the given value is a number('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax')\n",
        "commentRange": {
            "start": 49,
            "end": 51
        },
        "context": {
            "type": "function",
            "name": "is-relative-length",
            "code": "\n    @return is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;\n",
            "line": {
                "start": 52,
                "end": 54
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-number"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        },
        "usedBy": [
            {
                "description": "Check if the given value is a length\n",
                "context": {
                    "type": "function",
                    "name": "is-length",
                    "code": "\n    @return is-relative-length($value) or is-absolute-length($value);\n",
                    "line": {
                        "start": 73,
                        "end": 75
                    }
                }
            }
        ]
    },
    {
        "description": "Check if the given value is a absolute length ('cm' 'mm' 'in' 'px' 'pt' 'pc')\n",
        "commentRange": {
            "start": 56,
            "end": 58
        },
        "context": {
            "type": "function",
            "name": "is-absolute-length",
            "code": "\n    @return is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;\n",
            "line": {
                "start": 59,
                "end": 61
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-number"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        },
        "usedBy": [
            {
                "description": "Check if the given value is a length\n",
                "context": {
                    "type": "function",
                    "name": "is-length",
                    "code": "\n    @return is-relative-length($value) or is-absolute-length($value);\n",
                    "line": {
                        "start": 73,
                        "end": 75
                    }
                }
            }
        ]
    },
    {
        "description": "Check if the given value is a percentage\n",
        "commentRange": {
            "start": 63,
            "end": 65
        },
        "context": {
            "type": "function",
            "name": "is-percentage",
            "code": "\n    @return is-number($value) and unit($value) == '%';\n",
            "line": {
                "start": 66,
                "end": 68
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-number"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        },
        "usedBy": [
            {
                "description": "Check if the given value is a position ('top' 'right' 'bottom' 'left' 'center')\n",
                "context": {
                    "type": "function",
                    "name": "is-position",
                    "code": "\n    @return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;\n",
                    "line": {
                        "start": 87,
                        "end": 89
                    }
                }
            }
        ]
    },
    {
        "description": "Check if the given value is a length\n",
        "commentRange": {
            "start": 70,
            "end": 72
        },
        "context": {
            "type": "function",
            "name": "is-length",
            "code": "\n    @return is-relative-length($value) or is-absolute-length($value);\n",
            "line": {
                "start": 73,
                "end": 75
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-relative-length"
            },
            {
                "type": "function",
                "name": "is-absolute-length"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        },
        "usedBy": [
            {
                "description": "Check if the given value is a position ('top' 'right' 'bottom' 'left' 'center')\n",
                "context": {
                    "type": "function",
                    "name": "is-position",
                    "code": "\n    @return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;\n",
                    "line": {
                        "start": 87,
                        "end": 89
                    }
                }
            }
        ]
    },
    {
        "description": "Check if the given value is a resolution ('dpi' 'dpcm' 'dppx')\n",
        "commentRange": {
            "start": 77,
            "end": 79
        },
        "context": {
            "type": "function",
            "name": "is-resolution",
            "code": "\n    @return is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;\n",
            "line": {
                "start": 80,
                "end": 82
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-number"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        }
    },
    {
        "description": "Check if the given value is a position ('top' 'right' 'bottom' 'left' 'center')\n",
        "commentRange": {
            "start": 84,
            "end": 86
        },
        "context": {
            "type": "function",
            "name": "is-position",
            "code": "\n    @return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;\n",
            "line": {
                "start": 87,
                "end": 89
            }
        },
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "The value to check"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "True if is"
        },
        "group": [
            "type checks"
        ],
        "author": [
            "Robin Radic"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "is-length"
            },
            {
                "type": "function",
                "name": "is-percentage"
            }
        ],
        "file": {
            "path": "functions/_data-types.scss",
            "name": "_data-types.scss"
        }
    },
    {
        "description": "",
        "commentRange": {
            "start": 1,
            "end": 1
        },
        "context": {
            "type": "variable",
            "name": "dropdown-menu-head-color",
            "value": "#cbd2d9",
            "scope": "private",
            "line": {
                "start": 3,
                "end": 3
            }
        },
        "todo": [
            ": sort out!!"
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "components/_dropdown.scss",
            "name": "_dropdown.scss"
        }
    },
    {
        "description": "Logs an error at `$pointer` with `$string` message\n",
        "commentRange": {
            "start": 2,
            "end": 5
        },
        "context": {
            "type": "function",
            "name": "_throw",
            "code": "\n    @error \"ERROR::#{$pointer}::#{$string}\";\n",
            "line": {
                "start": 6,
                "end": 8
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "error message"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "pointer position"
            }
        ],
        "group": [
            "undefined"
        ],
        "require": [],
        "throw": [
            "ERROR::#{$pointer}::#{$string}"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay parsing to type-specific function\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--value",
                    "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == '{' {\n            @return _json-decode--map($source, $pointer);\n        } @else if $token == '[' {\n            @return _json-decode--list($source, $pointer);\n        } @else if $token == 't' {\n            @return _json-decode--true($source, $pointer);\n        } @else if $token == 'f' {\n            @return _json-decode--false($source, $pointer);\n        } @else if $token == '\"' {\n            @return _json-decode--string($source, $pointer);\n        } @else if $token == 'n' {\n            @return _json-decode--null($source, $pointer);\n        } @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $token) {\n            @return _json-decode--number($source, $pointer);\n        } @else if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Empty JSON string.\", $pointer);\n",
                    "line": {
                        "start": 26,
                        "end": 55
                    }
                }
            },
            {
                "description": "Move pointer to position of token\n",
                "context": {
                    "type": "function",
                    "name": "_consume",
                    "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $char: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $char == $token {\n            @return $pointer;\n        } @else if $char == \" \" or $char == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Expected `#{$token}`; found `#{$char}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Expected `#{$token}` but reached end of stream.\", $pointer);\n",
                    "line": {
                        "start": 66,
                        "end": 83
                    }
                }
            },
            {
                "description": "Parses a JSON encoded number to find the integer part\n",
                "context": {
                    "type": "function",
                    "name": "_find-integer",
                    "code": "\n    $source: to-lower-case($source);\n    $length: str-length($source);\n    $numbers: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n    $result: 0;\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $index: index($numbers, $token);\n\n        @if $token == '-' {\n            // do nothing\n        } @else if $index {\n            $result: $result * 10 + ($index - 1);\n        } @else {\n            @if index('e' '.' ' ' ',' ']' '}', $token) {\n                @return $pointer, $result;\n            }\n\n            @return _throw(\"Unexpected token `\" + $token + \"`.\", $pointer);\n        }\n\n        $pointer: $pointer + 1;\n    }\n\n    @return $pointer, $result;\n",
                    "line": {
                        "start": 437,
                        "end": 463
                    }
                }
            },
            {
                "description": "Parses a JSON encoded number to find the digits\n",
                "context": {
                    "type": "function",
                    "name": "_find-digits",
                    "code": "\n    $source: to-lower-case($source);\n    $length: str-length($source);\n    $numbers: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n    $result: null;\n    $runs: 1;\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $index: index($numbers, $token);\n\n        @if $token == '.' {\n            // @continue;\n        } @else if $index and $index > 0 {\n            $runs: $runs * 10;\n            $result: if($result == null, ($index - 1), $result * 10 + ($index - 1));\n        } @else {\n            @if index('e' '.' ' ' ',' ']' '}', $token) {\n                @return $pointer, if($result != null, $result / $runs, $result);\n            }\n\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n\n        $pointer: $pointer + 1;\n    }\n\n    @return $pointer, if($result != null, $result / $runs, $result);\n",
                    "line": {
                        "start": 472,
                        "end": 500
                    }
                }
            },
            {
                "description": "Parses a JSON encoded number to find the exponent part\n",
                "context": {
                    "type": "function",
                    "name": "_find-exponent",
                    "code": "\n    $source: to-lower-case($source);\n    $length: str-length($source);\n    $numbers: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n    $result: null;\n    $minus: null;\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $index: index($numbers, $token);\n\n        @if $token == 'e' {\n            // @continue;\n        } @else if $token == '-' {\n            @if $minus != null {\n                @return _throw(\"Unexpected token `-`.\", $pointer);\n            }\n            $minus: true;\n        } @else if $token == '+' {\n            @if $minus != null {\n                @return _throw(\"Unexpected token `+`.\", $pointer);\n            }\n            $minus: false;\n        } @else if $index and $index > 0 {\n            $result: if($result == null, ($index - 1), $result * 10 + ($index - 1));\n        } @else {\n            @if index(' ' ',' ']' '}', $token) == null {\n                @return _throw(\"Unexpected token `\" + $token + \"`.\", $pointer);\n            }\n\n            @return $pointer, if($minus and $result != null, $result * -1, $result);\n        }\n\n        $pointer: $pointer + 1;\n    }\n\n    @return $pointer, if($minus and $result != null, $result * -1, $result);\n",
                    "line": {
                        "start": 509,
                        "end": 546
                    }
                }
            },
            {
                "description": "Parses a JSON encoded string\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--string",
                    "code": "\n    // Check for the end of the string\n    $temp: str-slice($source, $pointer);\n    $end: _find-ending-quote($temp);\n    $string: \"\";\n\n    // If no end is found\n    @if not $end or $end == 0 {\n        @return _throw(\"Unterminated string.\", $pointer);\n    } @else if $end > 1 {\n        // If string is not empty\n        $string: str-slice($temp, 1, $end - 1);\n\n        $cr: \"\n    \";\n        $string: _strip-token($string, \"\\\\\\r\", $cr);\n        $string: _strip-token($string, \"\\\\\\n\", $cr);\n        $string: _strip-token($string, '\\\\\\\"', '\"');\n\n        // Test whether the string could be a CSS length\n        $string: _length($string);\n\n        // Test whether the string could be a CSS color\n        @if type-of($string) == \"string\" {\n            $string: _color($string);\n        }\n    }\n\n    @return ($pointer + $end, $string);\n",
                    "line": {
                        "start": 558,
                        "end": 587
                    }
                }
            },
            {
                "description": "Parses a JSON encoded `true`\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--true",
                    "code": "\n    $length: str-length($source);\n\n    @if $length - $pointer < 2\n  or str-slice($source, $pointer, $pointer) != 'r'\n  or str-slice($source, $pointer + 1, $pointer + 1) != 'u'\n  or str-slice($source, $pointer + 2, $pointer + 2) != 'e' {\n        @return _throw(\"Unexpected token: `t`.\", $pointer);\n    }\n\n    @return ($pointer + 3, true);\n",
                    "line": {
                        "start": 594,
                        "end": 605
                    }
                }
            },
            {
                "description": "Parses a JSON encoded `false`\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--false",
                    "code": "\n    $length: str-length($source);\n\n    @if $length - $pointer < 3\n  or str-slice($source, $pointer, $pointer) != 'a'\n  or str-slice($source, $pointer + 1, $pointer + 1) != 'l'\n  or str-slice($source, $pointer + 2, $pointer + 2) != 's'\n  or str-slice($source, $pointer + 3, $pointer + 3) != 'e' {\n        @return _throw(\"Unexpected token: `f`.\", $pointer);\n    }\n\n    @return ($pointer + 4, false);\n",
                    "line": {
                        "start": 613,
                        "end": 625
                    }
                }
            },
            {
                "description": "Parses a JSON encoded `null`\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--null",
                    "code": "\n    $length: str-length($source);\n\n    @if $length - $pointer < 2\n  or str-slice($source, $pointer, $pointer) != 'u'\n  or str-slice($source, $pointer + 1, $pointer + 1) != 'l'\n  or str-slice($source, $pointer + 2, $pointer + 2) != 'l' {\n        @return _throw(\"Unexpected token: `n`.\", $pointer);\n    }\n\n    @return ($pointer + 3, null);\n",
                    "line": {
                        "start": 633,
                        "end": 644
                    }
                }
            },
            {
                "description": "Parses a JSON encoded number\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--number",
                    "code": "\n    $pointer: $pointer - 1; // Move back pointer to begininng of number\n    $allowed: '-' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'; // Allowed characted to start with\n    $first: str-slice($source, $pointer, $pointer); // First character of the number\n    $minus: $first == '-'; // Is it negative?\n\n    // Early check for errors\n    @if not index($allowed, $first) {\n        @return _throw(\"Unexpected token `\" + $first + \"`.\", $pointer);\n    }\n\n    // Find the integer part\n    $find-integer: _find-integer($source, $pointer);\n    $pointer: nth($find-integer, 1);\n    $result:  nth($find-integer, 2);\n    @if not $result { // Error occured\n        @return $find-integer;\n    }\n\n    // Find digits\n    @if str-slice($source, $pointer, $pointer) == '.' {\n        $find-digits: _find-digits($source, $pointer);\n        $pointer: nth($find-digits, 1);\n        $digits:  nth($find-digits, 2);\n\n        @if $digits == null { // Empty digits, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $digits == false { // Error occured, return it\n            @return $find-digits;\n        }\n\n        $result: $result + $digits;\n    }\n\n    // Find exponent\n    @if to-lower-case(str-slice($source, $pointer, $pointer)) == 'e' {\n        $find-exponent: _find-exponent($source, $pointer);\n        $pointer:  nth($find-exponent, 1);\n        $exponent: nth($find-exponent, 2);\n\n        @if $exponent == null { // Empty exponent, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $exponent == false { // Error occured, return it\n            @return $find-exponent;\n        }\n\n        $result: $result * _pow(10, $exponent);\n    }\n\n    @return ($pointer, if($minus, $result * -1, $result));\n",
                    "line": {
                        "start": 657,
                        "end": 707
                    }
                }
            },
            {
                "description": "Parses a JSON encoded array\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--list",
                    "code": "\n    $length: str-length($source);\n    $list: ();\n    $needs-comma: false;\n\n    @if $pointer <= $length and str-slice($source, $pointer, $pointer) == \"]\" {\n        @return ($pointer + 1, $list);\n    }\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n\n        @if $token == \"]\" {\n            @if not $needs-comma and length($list) != 0 {\n                @return _throw(\"Unexpected comma in array literal.\", $pointer);\n            }\n\n            // Do it the Sass way and destruct a single item array to an element.\n            @return ($pointer + 1, if(length($list) == 1, nth($list, 1), $list));\n        } @else if $token == \" \" or $token == \"\t\" {\n            $pointer: $pointer + 1;\n        } @else if $token == \",\" {\n            @if not $needs-comma {\n                @return _throw(\"Unexpected comma in array literal.\", $pointer);\n            }\n\n            $needs-comma: false;\n            $pointer: $pointer + 1;\n        } @else {\n            @if $needs-comma {\n                @return _throw(\"Missing comma in array literal.\", $pointer);\n            }\n\n            $read: _json-decode--value($source, $pointer);\n            $pointer: nth($read, 1);\n            $list: append($list, nth($read, 2));\n            $needs-comma: true;\n        }\n    }\n\n    @return _throw(\"Unterminated array literal.\", $pointer);\n",
                    "line": {
                        "start": 718,
                        "end": 759
                    }
                }
            },
            {
                "description": "Parses a JSON encoded object\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--map",
                    "code": "\n    $length: str-length($source);\n    $map: ();\n    $needs-comma: false;\n\n    // Deal with empty map\n    @if $pointer <= $length and str-slice($source, $pointer, $pointer) == \"}\" {\n        @return ($pointer + 1, $map);\n    }\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == \"}\" {\n            @if not $needs-comma and length($map) != 0 {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            @return ($pointer, $map);\n        } @else if $token == \" \" or $token == \"\t\" {\n            // @continue;\n        } @else if $token == \",\" {\n            @if not $needs-comma {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            $needs-comma: false;\n        } @else if $token == '\"' {\n            @if $needs-comma {\n                @return _throw(\"Missing comma in object literal.\", $pointer);\n            }\n\n            // Read key\n            $read-key:  _json-decode--string($source, $pointer);\n            $pointer: nth($read-key, 1);\n            $key:     nth($read-key, 2);\n\n            // Remove colon\n            $pointer: _consume($source, $pointer, \":\");\n            @if length($pointer) > 1 { // If consume has failed\n                @return _throw(\"Consuming token `:` failed.\", 0);\n            }\n\n            // Read value\n            $read-value: _json-decode--value($source, $pointer);\n            $pointer: nth($read-value, 1);\n            $value:    nth($read-value, 2);\n\n            // Add pair to map\n            $map: map-merge($map, ($key: $value));\n            $needs-comma: true;\n        } @else {\n            @return _throw(\"Unexpected token `\" + $token + \"` in object literal.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Unterminated object literal.\", $pointer);\n",
                    "line": {
                        "start": 774,
                        "end": 830
                    }
                }
            },
            {
                "description": "Parse a JSON string\n",
                "context": {
                    "type": "function",
                    "name": "json-decode",
                    "code": "\n    $length: str-length($json);\n    $pointer: 1;\n    $value: null;\n\n    @if $json == null {\n        @return _throw(\"Input string may not be null.\", $pointer);\n    }\n\n    @while $value != false // Stop if error\n  and $pointer <= $length {\n        $read: _json-decode--value($json, $pointer);\n        $pointer: nth($read, 1);\n        $value: nth($read, 2);\n    }\n\n    @return $value;\n",
                    "line": {
                        "start": 838,
                        "end": 855
                    }
                }
            }
        ]
    },
    {
        "description": "Delay parsing to type-specific function\n",
        "commentRange": {
            "start": 10,
            "end": 25
        },
        "context": {
            "type": "function",
            "name": "_json-decode--value",
            "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == '{' {\n            @return _json-decode--map($source, $pointer);\n        } @else if $token == '[' {\n            @return _json-decode--list($source, $pointer);\n        } @else if $token == 't' {\n            @return _json-decode--true($source, $pointer);\n        } @else if $token == 'f' {\n            @return _json-decode--false($source, $pointer);\n        } @else if $token == '\"' {\n            @return _json-decode--string($source, $pointer);\n        } @else if $token == 'n' {\n            @return _json-decode--null($source, $pointer);\n        } @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $token) {\n            @return _json-decode--number($source, $pointer);\n        } @else if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Empty JSON string.\", $pointer);\n",
            "line": {
                "start": 26,
                "end": 55
            }
        },
        "access": "private\naccording to found character",
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "Unexpected token $token.",
            "Empty JSON string."
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, parsed value)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--map",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--list",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--true",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--false",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--string",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--null",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--number",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded array\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--list",
                    "code": "\n    $length: str-length($source);\n    $list: ();\n    $needs-comma: false;\n\n    @if $pointer <= $length and str-slice($source, $pointer, $pointer) == \"]\" {\n        @return ($pointer + 1, $list);\n    }\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n\n        @if $token == \"]\" {\n            @if not $needs-comma and length($list) != 0 {\n                @return _throw(\"Unexpected comma in array literal.\", $pointer);\n            }\n\n            // Do it the Sass way and destruct a single item array to an element.\n            @return ($pointer + 1, if(length($list) == 1, nth($list, 1), $list));\n        } @else if $token == \" \" or $token == \"\t\" {\n            $pointer: $pointer + 1;\n        } @else if $token == \",\" {\n            @if not $needs-comma {\n                @return _throw(\"Unexpected comma in array literal.\", $pointer);\n            }\n\n            $needs-comma: false;\n            $pointer: $pointer + 1;\n        } @else {\n            @if $needs-comma {\n                @return _throw(\"Missing comma in array literal.\", $pointer);\n            }\n\n            $read: _json-decode--value($source, $pointer);\n            $pointer: nth($read, 1);\n            $list: append($list, nth($read, 2));\n            $needs-comma: true;\n        }\n    }\n\n    @return _throw(\"Unterminated array literal.\", $pointer);\n",
                    "line": {
                        "start": 718,
                        "end": 759
                    }
                }
            },
            {
                "description": "Parses a JSON encoded object\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--map",
                    "code": "\n    $length: str-length($source);\n    $map: ();\n    $needs-comma: false;\n\n    // Deal with empty map\n    @if $pointer <= $length and str-slice($source, $pointer, $pointer) == \"}\" {\n        @return ($pointer + 1, $map);\n    }\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == \"}\" {\n            @if not $needs-comma and length($map) != 0 {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            @return ($pointer, $map);\n        } @else if $token == \" \" or $token == \"\t\" {\n            // @continue;\n        } @else if $token == \",\" {\n            @if not $needs-comma {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            $needs-comma: false;\n        } @else if $token == '\"' {\n            @if $needs-comma {\n                @return _throw(\"Missing comma in object literal.\", $pointer);\n            }\n\n            // Read key\n            $read-key:  _json-decode--string($source, $pointer);\n            $pointer: nth($read-key, 1);\n            $key:     nth($read-key, 2);\n\n            // Remove colon\n            $pointer: _consume($source, $pointer, \":\");\n            @if length($pointer) > 1 { // If consume has failed\n                @return _throw(\"Consuming token `:` failed.\", 0);\n            }\n\n            // Read value\n            $read-value: _json-decode--value($source, $pointer);\n            $pointer: nth($read-value, 1);\n            $value:    nth($read-value, 2);\n\n            // Add pair to map\n            $map: map-merge($map, ($key: $value));\n            $needs-comma: true;\n        } @else {\n            @return _throw(\"Unexpected token `\" + $token + \"` in object literal.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Unterminated object literal.\", $pointer);\n",
                    "line": {
                        "start": 774,
                        "end": 830
                    }
                }
            },
            {
                "description": "Parse a JSON string\n",
                "context": {
                    "type": "function",
                    "name": "json-decode",
                    "code": "\n    $length: str-length($json);\n    $pointer: 1;\n    $value: null;\n\n    @if $json == null {\n        @return _throw(\"Input string may not be null.\", $pointer);\n    }\n\n    @while $value != false // Stop if error\n  and $pointer <= $length {\n        $read: _json-decode--value($json, $pointer);\n        $pointer: nth($read, 1);\n        $value: nth($read, 2);\n    }\n\n    @return $value;\n",
                    "line": {
                        "start": 838,
                        "end": 855
                    }
                }
            }
        ]
    },
    {
        "description": "Move pointer to position of token\n",
        "commentRange": {
            "start": 57,
            "end": 65
        },
        "context": {
            "type": "function",
            "name": "_consume",
            "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $char: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $char == $token {\n            @return $pointer;\n        } @else if $char == \" \" or $char == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Expected `#{$token}`; found `#{$char}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Expected `#{$token}` but reached end of stream.\", $pointer);\n",
            "line": {
                "start": 66,
                "end": 83
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            },
            {
                "type": "String",
                "name": "token",
                "description": "token to reach"
            }
        ],
        "throw": [
            "Expected $token; found $char.",
            "Expected $token but reached end of stream."
        ],
        "return": {
            "type": "Number",
            "description": "new pointer"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded object\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--map",
                    "code": "\n    $length: str-length($source);\n    $map: ();\n    $needs-comma: false;\n\n    // Deal with empty map\n    @if $pointer <= $length and str-slice($source, $pointer, $pointer) == \"}\" {\n        @return ($pointer + 1, $map);\n    }\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == \"}\" {\n            @if not $needs-comma and length($map) != 0 {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            @return ($pointer, $map);\n        } @else if $token == \" \" or $token == \"\t\" {\n            // @continue;\n        } @else if $token == \",\" {\n            @if not $needs-comma {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            $needs-comma: false;\n        } @else if $token == '\"' {\n            @if $needs-comma {\n                @return _throw(\"Missing comma in object literal.\", $pointer);\n            }\n\n            // Read key\n            $read-key:  _json-decode--string($source, $pointer);\n            $pointer: nth($read-key, 1);\n            $key:     nth($read-key, 2);\n\n            // Remove colon\n            $pointer: _consume($source, $pointer, \":\");\n            @if length($pointer) > 1 { // If consume has failed\n                @return _throw(\"Consuming token `:` failed.\", 0);\n            }\n\n            // Read value\n            $read-value: _json-decode--value($source, $pointer);\n            $pointer: nth($read-value, 1);\n            $value:    nth($read-value, 2);\n\n            // Add pair to map\n            $map: map-merge($map, ($key: $value));\n            $needs-comma: true;\n        } @else {\n            @return _throw(\"Unexpected token `\" + $token + \"` in object literal.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Unterminated object literal.\", $pointer);\n",
                    "line": {
                        "start": 774,
                        "end": 830
                    }
                }
            }
        ]
    },
    {
        "description": "Will find the first non escaped quote in a JSON String\n",
        "commentRange": {
            "start": 85,
            "end": 88
        },
        "context": {
            "type": "function",
            "name": "_find-ending-quote",
            "code": "",
            "line": {
                "start": 89,
                "end": 90
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "to search in"
            }
        ],
        "return": {
            "type": "Number",
            "description": "position of the first non escaped quote"
        },
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded string\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--string",
                    "code": "\n    // Check for the end of the string\n    $temp: str-slice($source, $pointer);\n    $end: _find-ending-quote($temp);\n    $string: \"\";\n\n    // If no end is found\n    @if not $end or $end == 0 {\n        @return _throw(\"Unterminated string.\", $pointer);\n    } @else if $end > 1 {\n        // If string is not empty\n        $string: str-slice($temp, 1, $end - 1);\n\n        $cr: \"\n    \";\n        $string: _strip-token($string, \"\\\\\\r\", $cr);\n        $string: _strip-token($string, \"\\\\\\n\", $cr);\n        $string: _strip-token($string, '\\\\\\\"', '\"');\n\n        // Test whether the string could be a CSS length\n        $string: _length($string);\n\n        // Test whether the string could be a CSS color\n        @if type-of($string) == \"string\" {\n            $string: _color($string);\n        }\n    }\n\n    @return ($pointer + $end, $string);\n",
                    "line": {
                        "start": 558,
                        "end": 587
                    }
                }
            }
        ]
    },
    {
        "description": "Strip special carriage return characters\n",
        "commentRange": {
            "start": 135,
            "end": 140
        },
        "context": {
            "type": "function",
            "name": "_strip-token",
            "code": "\n    $index: str-index($string, $search);\n\n    @if $index {\n        @return str-slice($string, 1, $index - 1) + $replace + _strip-token(str-slice($string, $index + str-length($search)), $search, $replace);\n    }\n\n    @return $string;\n",
            "line": {
                "start": 141,
                "end": 149
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "string to parse"
            },
            {
                "type": "String",
                "name": "search",
                "description": "char to strip"
            },
            {
                "type": "String",
                "name": "replace",
                "description": "('') - new substring"
            }
        ],
        "return": {
            "type": "String",
            "description": "new string"
        },
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded string\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--string",
                    "code": "\n    // Check for the end of the string\n    $temp: str-slice($source, $pointer);\n    $end: _find-ending-quote($temp);\n    $string: \"\";\n\n    // If no end is found\n    @if not $end or $end == 0 {\n        @return _throw(\"Unterminated string.\", $pointer);\n    } @else if $end > 1 {\n        // If string is not empty\n        $string: str-slice($temp, 1, $end - 1);\n\n        $cr: \"\n    \";\n        $string: _strip-token($string, \"\\\\\\r\", $cr);\n        $string: _strip-token($string, \"\\\\\\n\", $cr);\n        $string: _strip-token($string, '\\\\\\\"', '\"');\n\n        // Test whether the string could be a CSS length\n        $string: _length($string);\n\n        // Test whether the string could be a CSS color\n        @if type-of($string) == \"string\" {\n            $string: _color($string);\n        }\n    }\n\n    @return ($pointer + $end, $string);\n",
                    "line": {
                        "start": 558,
                        "end": 587
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded string to see if it's a CSS length\n",
        "commentRange": {
            "start": 151,
            "end": 155
        },
        "context": {
            "type": "function",
            "name": "_length",
            "code": "\n    @if type-of($string) == \"number\" {\n        @return $string;\n    }\n\n    $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\n    $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\n    $number: \"\";\n    $unit: \"\";\n\n    @for $i from 1 through str-length($string) {\n        $c: str-slice($string, $i, $i);\n        @if $c == ' ' or $c == \"\t\" {\n            @if $number != \"\" {\n                @return $string;\n            }\n        } @else if index('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' '-' '.', $c) {\n            $number: $number + $c;\n        } @else {\n            @if $number == \"\" {\n                @return $string;\n            }\n            $unit: $unit + $c;\n        }\n    }\n\n    $number: nth(_json-decode--number($number, 2), 2);\n    $index: index($strings, to-lower-case($unit));\n\n    @if $index and $index > 0 {\n        @return $number * nth($units, $index);\n    }\n\n    @return $string;\n",
            "line": {
                "start": 156,
                "end": 190
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "JSON string"
            }
        ],
        "return": {
            "type": "Number | String",
            "description": "string or number, depending on the match"
        },
        "require": [
            {
                "type": "function",
                "name": "_json-decode--number",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded string\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--string",
                    "code": "\n    // Check for the end of the string\n    $temp: str-slice($source, $pointer);\n    $end: _find-ending-quote($temp);\n    $string: \"\";\n\n    // If no end is found\n    @if not $end or $end == 0 {\n        @return _throw(\"Unterminated string.\", $pointer);\n    } @else if $end > 1 {\n        // If string is not empty\n        $string: str-slice($temp, 1, $end - 1);\n\n        $cr: \"\n    \";\n        $string: _strip-token($string, \"\\\\\\r\", $cr);\n        $string: _strip-token($string, \"\\\\\\n\", $cr);\n        $string: _strip-token($string, '\\\\\\\"', '\"');\n\n        // Test whether the string could be a CSS length\n        $string: _length($string);\n\n        // Test whether the string could be a CSS color\n        @if type-of($string) == \"string\" {\n            $string: _color($string);\n        }\n    }\n\n    @return ($pointer + $end, $string);\n",
                    "line": {
                        "start": 558,
                        "end": 587
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded string to see if it's a CSS color\n",
        "commentRange": {
            "start": 192,
            "end": 198
        },
        "context": {
            "type": "function",
            "name": "_color",
            "code": "\n    @if type-of($string) == \"color\" {\n        @return $string;\n    }\n\n    $string-lower: to-lower-case($string);\n    $colors: transparent black silver gray white maroon red purple fuchsia green lime olive yellow navy blue teal aqua aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray green greenyellow grey honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen;\n    $keywords: ();\n\n    // Filling $keywords with stringified color keywords\n    @each $color in $colors {\n        $keywords: append($keywords, $color + \"\");\n    }\n\n    // Deal with inherit keyword\n    @if $string-lower == \"inherit\" {\n        @return unquote($string);\n    }\n\n    @if index($keywords, $string-lower) {\n        // Deal with color keywords\n        @return nth($colors, index($keywords, $string-lower));\n    } @else if str-slice($string-lower, 1, 1) == '#' {\n        // Deal with hexadecimal triplets\n        @return _from-hex($string);\n    } @else if str-slice($string-lower, 1, 3) == 'rgb' {\n        // Deal with rgb(a) colors\n        @return _from-rgb($string);\n    } @else if str-slice($string-lower, 1, 3) == 'hsl' {\n        // Deal with hsl(a) colors\n        @return _from-hsl($string);\n    } @else {\n        // Return string\n        @return $string;\n    }\n",
            "line": {
                "start": 199,
                "end": 234
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "JSON string"
            }
        ],
        "return": {
            "type": "Color | String",
            "description": "string or number, depending on the match"
        },
        "require": [
            {
                "type": "function",
                "name": "_from-hex",
                "external": false
            },
            {
                "type": "function",
                "name": "_from-rgb",
                "external": false
            },
            {
                "type": "function",
                "name": "_from-hsl",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded string\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--string",
                    "code": "\n    // Check for the end of the string\n    $temp: str-slice($source, $pointer);\n    $end: _find-ending-quote($temp);\n    $string: \"\";\n\n    // If no end is found\n    @if not $end or $end == 0 {\n        @return _throw(\"Unterminated string.\", $pointer);\n    } @else if $end > 1 {\n        // If string is not empty\n        $string: str-slice($temp, 1, $end - 1);\n\n        $cr: \"\n    \";\n        $string: _strip-token($string, \"\\\\\\r\", $cr);\n        $string: _strip-token($string, \"\\\\\\n\", $cr);\n        $string: _strip-token($string, '\\\\\\\"', '\"');\n\n        // Test whether the string could be a CSS length\n        $string: _length($string);\n\n        // Test whether the string could be a CSS color\n        @if type-of($string) == \"string\" {\n            $string: _color($string);\n        }\n    }\n\n    @return ($pointer + $end, $string);\n",
                    "line": {
                        "start": 558,
                        "end": 587
                    }
                }
            }
        ]
    },
    {
        "description": "Cast a stringified number / stringified percentage into number type\n",
        "commentRange": {
            "start": 236,
            "end": 240
        },
        "context": {
            "type": "function",
            "name": "_get-color-value",
            "code": "\n    $first: str-slice($string, 1, 1);\n\n    // Pad <1 values with a leading 0\n    @if $first == '.' {\n        $string: '0' + $string;\n    }\n\n    $last: str-slice($string, -1, -1);\n\n    @return if(\n            $last == '%',\n            nth(_json-decode--number(str-slice($string, 1, -2), 2), 2) * 1%,\n            nth(_json-decode--number($string, 2), 2)\n    );\n",
            "line": {
                "start": 241,
                "end": 256
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "JSON string"
            }
        ],
        "return": {
            "type": "Number",
            "description": "unitless number or percentage"
        },
        "require": [
            {
                "type": "function",
                "name": "_json-decode--number",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Cast a JSON encoded string into a hsl(a) color\n",
                "context": {
                    "type": "function",
                    "name": "_from-hsl",
                    "code": "\n    $frags: ();\n    $string-lower: to-lower-case($string);\n    $is-alpha: str-slice($string-lower, 4, 4) == 'a';\n    $length: str-length($string);\n    $start: str-index($string, \"(\");\n\n    @for $i from $start through $length {\n        $token: str-slice($string-lower, $i, $i);\n        @if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else if $token == '(' or $token == ',' {\n            $frags: append($frags, \"\");\n        } @else if $token == ')' {\n            @if length($frags) != if($is-alpha, 4, 3) { @return $string; } // Parsing error\n            $hue: _get-color-value(nth($frags, 1));\n            $saturation: _get-color-value(nth($frags, 2));\n            $lightness: _get-color-value(nth($frags, 3));\n\n            @if not $hue or not $saturation or not $lightness {\n                @return $string;\n            }\n\n            @if $is-alpha {\n                @if length($frags) != 4 { @return $string; } // No alpha channel found\n                $alpha: _get-color-value(nth($frags, 4));\n                @if not $alpha { @return $string; } // Error parsing alpha channel\n                @return hsla($hue, $saturation, $lightness, $alpha);\n            }\n\n            @return hsl($hue, $saturation, $lightness);\n        } @else {\n            $frags: set-nth($frags, length($frags), nth($frags, length($frags)) + $token);\n        }\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 263,
                        "end": 300
                    }
                }
            },
            {
                "description": "Cast a JSON encoded string into a rgb(a) color\n",
                "context": {
                    "type": "function",
                    "name": "_from-rgb",
                    "code": "\n    $string-lower: to-lower-case($string);\n    $frags: ();\n    $is-alpha: str-slice($string-lower, 4, 4) == 'a';\n    $start: str-index($string, \"(\");\n    $length: str-length($string);\n\n    @for $i from $start through $length {\n        $token: str-slice($string-lower, $i, $i);\n        @if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else if $token == '(' or $token == ',' {\n            $frags: append($frags, \"\");\n        } @else if $token == ')' {\n            @if length($frags) != if($is-alpha, 4, 3) { @return $string; } // Parsing error\n            $red: _get-color-value(nth($frags, 1));\n            $green: _get-color-value(nth($frags, 2));\n            $blue: _get-color-value(nth($frags, 3));\n\n            @if not $red or not $green or not $blue {\n                @return $string;\n            }\n\n            @if $is-alpha {\n                @if length($frags) != 4 { @return $string; } // No alpha channel found\n                $alpha: _get-color-value(nth($frags, 4));\n                @if not $alpha { @return $string; } // Error parsing alpha channel\n                @return rgba($red, $green, $blue, $alpha);\n            }\n\n            @return rgb($red, $green, $blue);\n        } @else {\n            $frags: set-nth($frags, length($frags), nth($frags, length($frags)) + $token);\n        }\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 307,
                        "end": 344
                    }
                }
            }
        ]
    },
    {
        "description": "Cast a JSON encoded string into a hsl(a) color\n",
        "commentRange": {
            "start": 258,
            "end": 262
        },
        "context": {
            "type": "function",
            "name": "_from-hsl",
            "code": "\n    $frags: ();\n    $string-lower: to-lower-case($string);\n    $is-alpha: str-slice($string-lower, 4, 4) == 'a';\n    $length: str-length($string);\n    $start: str-index($string, \"(\");\n\n    @for $i from $start through $length {\n        $token: str-slice($string-lower, $i, $i);\n        @if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else if $token == '(' or $token == ',' {\n            $frags: append($frags, \"\");\n        } @else if $token == ')' {\n            @if length($frags) != if($is-alpha, 4, 3) { @return $string; } // Parsing error\n            $hue: _get-color-value(nth($frags, 1));\n            $saturation: _get-color-value(nth($frags, 2));\n            $lightness: _get-color-value(nth($frags, 3));\n\n            @if not $hue or not $saturation or not $lightness {\n                @return $string;\n            }\n\n            @if $is-alpha {\n                @if length($frags) != 4 { @return $string; } // No alpha channel found\n                $alpha: _get-color-value(nth($frags, 4));\n                @if not $alpha { @return $string; } // Error parsing alpha channel\n                @return hsla($hue, $saturation, $lightness, $alpha);\n            }\n\n            @return hsl($hue, $saturation, $lightness);\n        } @else {\n            $frags: set-nth($frags, length($frags), nth($frags, length($frags)) + $token);\n        }\n    }\n\n    @return $string;\n",
            "line": {
                "start": 263,
                "end": 300
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "JSON string"
            }
        ],
        "return": {
            "type": "Color | String",
            "description": "string or hsl(a) color, depending on the match"
        },
        "require": [
            {
                "type": "function",
                "name": "_get-color-value",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded string to see if it's a CSS color\n",
                "context": {
                    "type": "function",
                    "name": "_color",
                    "code": "\n    @if type-of($string) == \"color\" {\n        @return $string;\n    }\n\n    $string-lower: to-lower-case($string);\n    $colors: transparent black silver gray white maroon red purple fuchsia green lime olive yellow navy blue teal aqua aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray green greenyellow grey honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen;\n    $keywords: ();\n\n    // Filling $keywords with stringified color keywords\n    @each $color in $colors {\n        $keywords: append($keywords, $color + \"\");\n    }\n\n    // Deal with inherit keyword\n    @if $string-lower == \"inherit\" {\n        @return unquote($string);\n    }\n\n    @if index($keywords, $string-lower) {\n        // Deal with color keywords\n        @return nth($colors, index($keywords, $string-lower));\n    } @else if str-slice($string-lower, 1, 1) == '#' {\n        // Deal with hexadecimal triplets\n        @return _from-hex($string);\n    } @else if str-slice($string-lower, 1, 3) == 'rgb' {\n        // Deal with rgb(a) colors\n        @return _from-rgb($string);\n    } @else if str-slice($string-lower, 1, 3) == 'hsl' {\n        // Deal with hsl(a) colors\n        @return _from-hsl($string);\n    } @else {\n        // Return string\n        @return $string;\n    }\n",
                    "line": {
                        "start": 199,
                        "end": 234
                    }
                }
            }
        ]
    },
    {
        "description": "Cast a JSON encoded string into a rgb(a) color\n",
        "commentRange": {
            "start": 302,
            "end": 306
        },
        "context": {
            "type": "function",
            "name": "_from-rgb",
            "code": "\n    $string-lower: to-lower-case($string);\n    $frags: ();\n    $is-alpha: str-slice($string-lower, 4, 4) == 'a';\n    $start: str-index($string, \"(\");\n    $length: str-length($string);\n\n    @for $i from $start through $length {\n        $token: str-slice($string-lower, $i, $i);\n        @if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else if $token == '(' or $token == ',' {\n            $frags: append($frags, \"\");\n        } @else if $token == ')' {\n            @if length($frags) != if($is-alpha, 4, 3) { @return $string; } // Parsing error\n            $red: _get-color-value(nth($frags, 1));\n            $green: _get-color-value(nth($frags, 2));\n            $blue: _get-color-value(nth($frags, 3));\n\n            @if not $red or not $green or not $blue {\n                @return $string;\n            }\n\n            @if $is-alpha {\n                @if length($frags) != 4 { @return $string; } // No alpha channel found\n                $alpha: _get-color-value(nth($frags, 4));\n                @if not $alpha { @return $string; } // Error parsing alpha channel\n                @return rgba($red, $green, $blue, $alpha);\n            }\n\n            @return rgb($red, $green, $blue);\n        } @else {\n            $frags: set-nth($frags, length($frags), nth($frags, length($frags)) + $token);\n        }\n    }\n\n    @return $string;\n",
            "line": {
                "start": 307,
                "end": 344
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "JSON string"
            }
        ],
        "return": {
            "type": "Color | String",
            "description": "string or rgb(a) color depending on the match"
        },
        "require": [
            {
                "type": "function",
                "name": "_get-color-value",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded string to see if it's a CSS color\n",
                "context": {
                    "type": "function",
                    "name": "_color",
                    "code": "\n    @if type-of($string) == \"color\" {\n        @return $string;\n    }\n\n    $string-lower: to-lower-case($string);\n    $colors: transparent black silver gray white maroon red purple fuchsia green lime olive yellow navy blue teal aqua aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray green greenyellow grey honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen;\n    $keywords: ();\n\n    // Filling $keywords with stringified color keywords\n    @each $color in $colors {\n        $keywords: append($keywords, $color + \"\");\n    }\n\n    // Deal with inherit keyword\n    @if $string-lower == \"inherit\" {\n        @return unquote($string);\n    }\n\n    @if index($keywords, $string-lower) {\n        // Deal with color keywords\n        @return nth($colors, index($keywords, $string-lower));\n    } @else if str-slice($string-lower, 1, 1) == '#' {\n        // Deal with hexadecimal triplets\n        @return _from-hex($string);\n    } @else if str-slice($string-lower, 1, 3) == 'rgb' {\n        // Deal with rgb(a) colors\n        @return _from-rgb($string);\n    } @else if str-slice($string-lower, 1, 3) == 'hsl' {\n        // Deal with hsl(a) colors\n        @return _from-hsl($string);\n    } @else {\n        // Return string\n        @return $string;\n    }\n",
                    "line": {
                        "start": 199,
                        "end": 234
                    }
                }
            }
        ]
    },
    {
        "description": "Cast a JSON encoded string into a hexadecimal color\n",
        "commentRange": {
            "start": 346,
            "end": 350
        },
        "context": {
            "type": "function",
            "name": "_from-hex",
            "code": "\n    $string-lower: to-lower-case($string);\n    $r: \"\";  $g: \"\"; $b: \"\";\n    $hex: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\";\n    $length: str-length($string);\n    $max: if($length == 4, 1, 2);\n\n    // Check for length accuracy\n    @if $length != 4 and $length != 7 {\n        @return $string;\n    }\n\n    // Loop from the second character (omitting #)\n    @for $i from 2 through $length {\n        $c: str-slice($string-lower, $i, $i);\n\n        // If wrong character, return\n        @if index($hex, $c) == null {\n            @return $string;\n        }\n\n        @if      str-length($r) < $max {\n            $r: $r + $c;\n        } @else if str-length($g) < $max {\n            $g: $g + $c;\n        } @else if str-length($b) < $max {\n            $b: $b + $c;\n        }\n    }\n\n    @if $length == 4 {\n        $r: $r + $r;\n        $g: $g + $g;\n        $b: $b + $b;\n    }\n\n    @return rgb(_hex-to-dec($r), _hex-to-dec($g), _hex-to-dec($b));\n",
            "line": {
                "start": 351,
                "end": 388
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "JSON string"
            }
        ],
        "return": {
            "type": "Color | String",
            "description": "string or hex color depending on the match"
        },
        "require": [
            {
                "type": "function",
                "name": "_hex-to-dec",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded string to see if it's a CSS color\n",
                "context": {
                    "type": "function",
                    "name": "_color",
                    "code": "\n    @if type-of($string) == \"color\" {\n        @return $string;\n    }\n\n    $string-lower: to-lower-case($string);\n    $colors: transparent black silver gray white maroon red purple fuchsia green lime olive yellow navy blue teal aqua aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray green greenyellow grey honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen;\n    $keywords: ();\n\n    // Filling $keywords with stringified color keywords\n    @each $color in $colors {\n        $keywords: append($keywords, $color + \"\");\n    }\n\n    // Deal with inherit keyword\n    @if $string-lower == \"inherit\" {\n        @return unquote($string);\n    }\n\n    @if index($keywords, $string-lower) {\n        // Deal with color keywords\n        @return nth($colors, index($keywords, $string-lower));\n    } @else if str-slice($string-lower, 1, 1) == '#' {\n        // Deal with hexadecimal triplets\n        @return _from-hex($string);\n    } @else if str-slice($string-lower, 1, 3) == 'rgb' {\n        // Deal with rgb(a) colors\n        @return _from-rgb($string);\n    } @else if str-slice($string-lower, 1, 3) == 'hsl' {\n        // Deal with hsl(a) colors\n        @return _from-hsl($string);\n    } @else {\n        // Return string\n        @return $string;\n    }\n",
                    "line": {
                        "start": 199,
                        "end": 234
                    }
                }
            }
        ]
    },
    {
        "description": "Convert an hexadecimal number to a decimal number\n",
        "commentRange": {
            "start": 390,
            "end": 393
        },
        "context": {
            "type": "function",
            "name": "_hex-to-dec",
            "code": "\n    $hex: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\";\n    $string: to-lower-case($string);\n    $length: str-length($string);\n\n    $dec: 0;\n    @for $i from 1 through $length {\n        $factor: 1 + (15 * ($length - $i));\n        $index: index($hex, str-slice($string, $i, $i));\n        $dec: $dec + $factor * ($index - 1);\n    }\n\n    @return $dec;\n",
            "line": {
                "start": 394,
                "end": 407
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "hexadecimal value"
            }
        ],
        "return": {
            "type": "Number",
            "description": "decimal number"
        },
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Cast a JSON encoded string into a hexadecimal color\n",
                "context": {
                    "type": "function",
                    "name": "_from-hex",
                    "code": "\n    $string-lower: to-lower-case($string);\n    $r: \"\";  $g: \"\"; $b: \"\";\n    $hex: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\";\n    $length: str-length($string);\n    $max: if($length == 4, 1, 2);\n\n    // Check for length accuracy\n    @if $length != 4 and $length != 7 {\n        @return $string;\n    }\n\n    // Loop from the second character (omitting #)\n    @for $i from 2 through $length {\n        $c: str-slice($string-lower, $i, $i);\n\n        // If wrong character, return\n        @if index($hex, $c) == null {\n            @return $string;\n        }\n\n        @if      str-length($r) < $max {\n            $r: $r + $c;\n        } @else if str-length($g) < $max {\n            $g: $g + $c;\n        } @else if str-length($b) < $max {\n            $b: $b + $c;\n        }\n    }\n\n    @if $length == 4 {\n        $r: $r + $r;\n        $g: $g + $g;\n        $b: $b + $b;\n    }\n\n    @return rgb(_hex-to-dec($r), _hex-to-dec($g), _hex-to-dec($b));\n",
                    "line": {
                        "start": 351,
                        "end": 388
                    }
                }
            }
        ]
    },
    {
        "description": "Power function\n",
        "commentRange": {
            "start": 409,
            "end": 413
        },
        "context": {
            "type": "function",
            "name": "_pow",
            "code": "\n    @if $n == 0 { @return 1; }\n    $ret: 1;\n    @if $n >= 0 {\n        @for $i from 1 through $n {\n            $ret: $ret * $x;\n        }\n    } @else {\n        @for $i from $n to 0 {\n            $ret: $ret / $x;\n        }\n    }\n\n    @return $ret;\n",
            "line": {
                "start": 414,
                "end": 428
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "Number",
                "name": "x",
                "description": "number"
            },
            {
                "type": "Number",
                "name": "n",
                "description": "power"
            }
        ],
        "return": {
            "type": "Number"
        },
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded number\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--number",
                    "code": "\n    $pointer: $pointer - 1; // Move back pointer to begininng of number\n    $allowed: '-' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'; // Allowed characted to start with\n    $first: str-slice($source, $pointer, $pointer); // First character of the number\n    $minus: $first == '-'; // Is it negative?\n\n    // Early check for errors\n    @if not index($allowed, $first) {\n        @return _throw(\"Unexpected token `\" + $first + \"`.\", $pointer);\n    }\n\n    // Find the integer part\n    $find-integer: _find-integer($source, $pointer);\n    $pointer: nth($find-integer, 1);\n    $result:  nth($find-integer, 2);\n    @if not $result { // Error occured\n        @return $find-integer;\n    }\n\n    // Find digits\n    @if str-slice($source, $pointer, $pointer) == '.' {\n        $find-digits: _find-digits($source, $pointer);\n        $pointer: nth($find-digits, 1);\n        $digits:  nth($find-digits, 2);\n\n        @if $digits == null { // Empty digits, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $digits == false { // Error occured, return it\n            @return $find-digits;\n        }\n\n        $result: $result + $digits;\n    }\n\n    // Find exponent\n    @if to-lower-case(str-slice($source, $pointer, $pointer)) == 'e' {\n        $find-exponent: _find-exponent($source, $pointer);\n        $pointer:  nth($find-exponent, 1);\n        $exponent: nth($find-exponent, 2);\n\n        @if $exponent == null { // Empty exponent, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $exponent == false { // Error occured, return it\n            @return $find-exponent;\n        }\n\n        $result: $result * _pow(10, $exponent);\n    }\n\n    @return ($pointer, if($minus, $result * -1, $result));\n",
                    "line": {
                        "start": 657,
                        "end": 707
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded number to find the integer part\n",
        "commentRange": {
            "start": 430,
            "end": 436
        },
        "context": {
            "type": "function",
            "name": "_find-integer",
            "code": "\n    $source: to-lower-case($source);\n    $length: str-length($source);\n    $numbers: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n    $result: 0;\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $index: index($numbers, $token);\n\n        @if $token == '-' {\n            // do nothing\n        } @else if $index {\n            $result: $result * 10 + ($index - 1);\n        } @else {\n            @if index('e' '.' ' ' ',' ']' '}', $token) {\n                @return $pointer, $result;\n            }\n\n            @return _throw(\"Unexpected token `\" + $token + \"`.\", $pointer);\n        }\n\n        $pointer: $pointer + 1;\n    }\n\n    @return $pointer, $result;\n",
            "line": {
                "start": 437,
                "end": 463
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "Unexpected token $token."
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, parsed number)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded number\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--number",
                    "code": "\n    $pointer: $pointer - 1; // Move back pointer to begininng of number\n    $allowed: '-' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'; // Allowed characted to start with\n    $first: str-slice($source, $pointer, $pointer); // First character of the number\n    $minus: $first == '-'; // Is it negative?\n\n    // Early check for errors\n    @if not index($allowed, $first) {\n        @return _throw(\"Unexpected token `\" + $first + \"`.\", $pointer);\n    }\n\n    // Find the integer part\n    $find-integer: _find-integer($source, $pointer);\n    $pointer: nth($find-integer, 1);\n    $result:  nth($find-integer, 2);\n    @if not $result { // Error occured\n        @return $find-integer;\n    }\n\n    // Find digits\n    @if str-slice($source, $pointer, $pointer) == '.' {\n        $find-digits: _find-digits($source, $pointer);\n        $pointer: nth($find-digits, 1);\n        $digits:  nth($find-digits, 2);\n\n        @if $digits == null { // Empty digits, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $digits == false { // Error occured, return it\n            @return $find-digits;\n        }\n\n        $result: $result + $digits;\n    }\n\n    // Find exponent\n    @if to-lower-case(str-slice($source, $pointer, $pointer)) == 'e' {\n        $find-exponent: _find-exponent($source, $pointer);\n        $pointer:  nth($find-exponent, 1);\n        $exponent: nth($find-exponent, 2);\n\n        @if $exponent == null { // Empty exponent, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $exponent == false { // Error occured, return it\n            @return $find-exponent;\n        }\n\n        $result: $result * _pow(10, $exponent);\n    }\n\n    @return ($pointer, if($minus, $result * -1, $result));\n",
                    "line": {
                        "start": 657,
                        "end": 707
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded number to find the digits\n",
        "commentRange": {
            "start": 465,
            "end": 471
        },
        "context": {
            "type": "function",
            "name": "_find-digits",
            "code": "\n    $source: to-lower-case($source);\n    $length: str-length($source);\n    $numbers: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n    $result: null;\n    $runs: 1;\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $index: index($numbers, $token);\n\n        @if $token == '.' {\n            // @continue;\n        } @else if $index and $index > 0 {\n            $runs: $runs * 10;\n            $result: if($result == null, ($index - 1), $result * 10 + ($index - 1));\n        } @else {\n            @if index('e' '.' ' ' ',' ']' '}', $token) {\n                @return $pointer, if($result != null, $result / $runs, $result);\n            }\n\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n\n        $pointer: $pointer + 1;\n    }\n\n    @return $pointer, if($result != null, $result / $runs, $result);\n",
            "line": {
                "start": 472,
                "end": 500
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "Unexpected token $token."
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, parsed number)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded number\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--number",
                    "code": "\n    $pointer: $pointer - 1; // Move back pointer to begininng of number\n    $allowed: '-' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'; // Allowed characted to start with\n    $first: str-slice($source, $pointer, $pointer); // First character of the number\n    $minus: $first == '-'; // Is it negative?\n\n    // Early check for errors\n    @if not index($allowed, $first) {\n        @return _throw(\"Unexpected token `\" + $first + \"`.\", $pointer);\n    }\n\n    // Find the integer part\n    $find-integer: _find-integer($source, $pointer);\n    $pointer: nth($find-integer, 1);\n    $result:  nth($find-integer, 2);\n    @if not $result { // Error occured\n        @return $find-integer;\n    }\n\n    // Find digits\n    @if str-slice($source, $pointer, $pointer) == '.' {\n        $find-digits: _find-digits($source, $pointer);\n        $pointer: nth($find-digits, 1);\n        $digits:  nth($find-digits, 2);\n\n        @if $digits == null { // Empty digits, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $digits == false { // Error occured, return it\n            @return $find-digits;\n        }\n\n        $result: $result + $digits;\n    }\n\n    // Find exponent\n    @if to-lower-case(str-slice($source, $pointer, $pointer)) == 'e' {\n        $find-exponent: _find-exponent($source, $pointer);\n        $pointer:  nth($find-exponent, 1);\n        $exponent: nth($find-exponent, 2);\n\n        @if $exponent == null { // Empty exponent, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $exponent == false { // Error occured, return it\n            @return $find-exponent;\n        }\n\n        $result: $result * _pow(10, $exponent);\n    }\n\n    @return ($pointer, if($minus, $result * -1, $result));\n",
                    "line": {
                        "start": 657,
                        "end": 707
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded number to find the exponent part\n",
        "commentRange": {
            "start": 502,
            "end": 508
        },
        "context": {
            "type": "function",
            "name": "_find-exponent",
            "code": "\n    $source: to-lower-case($source);\n    $length: str-length($source);\n    $numbers: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n    $result: null;\n    $minus: null;\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $index: index($numbers, $token);\n\n        @if $token == 'e' {\n            // @continue;\n        } @else if $token == '-' {\n            @if $minus != null {\n                @return _throw(\"Unexpected token `-`.\", $pointer);\n            }\n            $minus: true;\n        } @else if $token == '+' {\n            @if $minus != null {\n                @return _throw(\"Unexpected token `+`.\", $pointer);\n            }\n            $minus: false;\n        } @else if $index and $index > 0 {\n            $result: if($result == null, ($index - 1), $result * 10 + ($index - 1));\n        } @else {\n            @if index(' ' ',' ']' '}', $token) == null {\n                @return _throw(\"Unexpected token `\" + $token + \"`.\", $pointer);\n            }\n\n            @return $pointer, if($minus and $result != null, $result * -1, $result);\n        }\n\n        $pointer: $pointer + 1;\n    }\n\n    @return $pointer, if($minus and $result != null, $result * -1, $result);\n",
            "line": {
                "start": 509,
                "end": 546
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "Unexpected token $token."
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, parsed number)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Parses a JSON encoded number\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--number",
                    "code": "\n    $pointer: $pointer - 1; // Move back pointer to begininng of number\n    $allowed: '-' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'; // Allowed characted to start with\n    $first: str-slice($source, $pointer, $pointer); // First character of the number\n    $minus: $first == '-'; // Is it negative?\n\n    // Early check for errors\n    @if not index($allowed, $first) {\n        @return _throw(\"Unexpected token `\" + $first + \"`.\", $pointer);\n    }\n\n    // Find the integer part\n    $find-integer: _find-integer($source, $pointer);\n    $pointer: nth($find-integer, 1);\n    $result:  nth($find-integer, 2);\n    @if not $result { // Error occured\n        @return $find-integer;\n    }\n\n    // Find digits\n    @if str-slice($source, $pointer, $pointer) == '.' {\n        $find-digits: _find-digits($source, $pointer);\n        $pointer: nth($find-digits, 1);\n        $digits:  nth($find-digits, 2);\n\n        @if $digits == null { // Empty digits, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $digits == false { // Error occured, return it\n            @return $find-digits;\n        }\n\n        $result: $result + $digits;\n    }\n\n    // Find exponent\n    @if to-lower-case(str-slice($source, $pointer, $pointer)) == 'e' {\n        $find-exponent: _find-exponent($source, $pointer);\n        $pointer:  nth($find-exponent, 1);\n        $exponent: nth($find-exponent, 2);\n\n        @if $exponent == null { // Empty exponent, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $exponent == false { // Error occured, return it\n            @return $find-exponent;\n        }\n\n        $result: $result * _pow(10, $exponent);\n    }\n\n    @return ($pointer, if($minus, $result * -1, $result));\n",
                    "line": {
                        "start": 657,
                        "end": 707
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded string\n",
        "commentRange": {
            "start": 548,
            "end": 557
        },
        "context": {
            "type": "function",
            "name": "_json-decode--string",
            "code": "\n    // Check for the end of the string\n    $temp: str-slice($source, $pointer);\n    $end: _find-ending-quote($temp);\n    $string: \"\";\n\n    // If no end is found\n    @if not $end or $end == 0 {\n        @return _throw(\"Unterminated string.\", $pointer);\n    } @else if $end > 1 {\n        // If string is not empty\n        $string: str-slice($temp, 1, $end - 1);\n\n        $cr: \"\n    \";\n        $string: _strip-token($string, \"\\\\\\r\", $cr);\n        $string: _strip-token($string, \"\\\\\\n\", $cr);\n        $string: _strip-token($string, '\\\\\\\"', '\"');\n\n        // Test whether the string could be a CSS length\n        $string: _length($string);\n\n        // Test whether the string could be a CSS color\n        @if type-of($string) == \"string\" {\n            $string: _color($string);\n        }\n    }\n\n    @return ($pointer + $end, $string);\n",
            "line": {
                "start": 558,
                "end": 587
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "Unterminated string."
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, parsed string / color / length)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            },
            {
                "type": "function",
                "name": "_find-ending-quote",
                "external": false
            },
            {
                "type": "function",
                "name": "_strip-token",
                "external": false
            },
            {
                "type": "function",
                "name": "_color",
                "external": false
            },
            {
                "type": "function",
                "name": "_length",
                "external": false
            }
        ],
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay parsing to type-specific function\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--value",
                    "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == '{' {\n            @return _json-decode--map($source, $pointer);\n        } @else if $token == '[' {\n            @return _json-decode--list($source, $pointer);\n        } @else if $token == 't' {\n            @return _json-decode--true($source, $pointer);\n        } @else if $token == 'f' {\n            @return _json-decode--false($source, $pointer);\n        } @else if $token == '\"' {\n            @return _json-decode--string($source, $pointer);\n        } @else if $token == 'n' {\n            @return _json-decode--null($source, $pointer);\n        } @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $token) {\n            @return _json-decode--number($source, $pointer);\n        } @else if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Empty JSON string.\", $pointer);\n",
                    "line": {
                        "start": 26,
                        "end": 55
                    }
                }
            },
            {
                "description": "Parses a JSON encoded object\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--map",
                    "code": "\n    $length: str-length($source);\n    $map: ();\n    $needs-comma: false;\n\n    // Deal with empty map\n    @if $pointer <= $length and str-slice($source, $pointer, $pointer) == \"}\" {\n        @return ($pointer + 1, $map);\n    }\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == \"}\" {\n            @if not $needs-comma and length($map) != 0 {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            @return ($pointer, $map);\n        } @else if $token == \" \" or $token == \"\t\" {\n            // @continue;\n        } @else if $token == \",\" {\n            @if not $needs-comma {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            $needs-comma: false;\n        } @else if $token == '\"' {\n            @if $needs-comma {\n                @return _throw(\"Missing comma in object literal.\", $pointer);\n            }\n\n            // Read key\n            $read-key:  _json-decode--string($source, $pointer);\n            $pointer: nth($read-key, 1);\n            $key:     nth($read-key, 2);\n\n            // Remove colon\n            $pointer: _consume($source, $pointer, \":\");\n            @if length($pointer) > 1 { // If consume has failed\n                @return _throw(\"Consuming token `:` failed.\", 0);\n            }\n\n            // Read value\n            $read-value: _json-decode--value($source, $pointer);\n            $pointer: nth($read-value, 1);\n            $value:    nth($read-value, 2);\n\n            // Add pair to map\n            $map: map-merge($map, ($key: $value));\n            $needs-comma: true;\n        } @else {\n            @return _throw(\"Unexpected token `\" + $token + \"` in object literal.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Unterminated object literal.\", $pointer);\n",
                    "line": {
                        "start": 774,
                        "end": 830
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded `true`\n",
        "commentRange": {
            "start": 588,
            "end": 593
        },
        "context": {
            "type": "function",
            "name": "_json-decode--true",
            "code": "\n    $length: str-length($source);\n\n    @if $length - $pointer < 2\n  or str-slice($source, $pointer, $pointer) != 'r'\n  or str-slice($source, $pointer + 1, $pointer + 1) != 'u'\n  or str-slice($source, $pointer + 2, $pointer + 2) != 'e' {\n        @return _throw(\"Unexpected token: `t`.\", $pointer);\n    }\n\n    @return ($pointer + 3, true);\n",
            "line": {
                "start": 594,
                "end": 605
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "Unexpected token `t`."
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, true)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            }
        ],
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay parsing to type-specific function\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--value",
                    "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == '{' {\n            @return _json-decode--map($source, $pointer);\n        } @else if $token == '[' {\n            @return _json-decode--list($source, $pointer);\n        } @else if $token == 't' {\n            @return _json-decode--true($source, $pointer);\n        } @else if $token == 'f' {\n            @return _json-decode--false($source, $pointer);\n        } @else if $token == '\"' {\n            @return _json-decode--string($source, $pointer);\n        } @else if $token == 'n' {\n            @return _json-decode--null($source, $pointer);\n        } @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $token) {\n            @return _json-decode--number($source, $pointer);\n        } @else if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Empty JSON string.\", $pointer);\n",
                    "line": {
                        "start": 26,
                        "end": 55
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded `false`\n",
        "commentRange": {
            "start": 607,
            "end": 612
        },
        "context": {
            "type": "function",
            "name": "_json-decode--false",
            "code": "\n    $length: str-length($source);\n\n    @if $length - $pointer < 3\n  or str-slice($source, $pointer, $pointer) != 'a'\n  or str-slice($source, $pointer + 1, $pointer + 1) != 'l'\n  or str-slice($source, $pointer + 2, $pointer + 2) != 's'\n  or str-slice($source, $pointer + 3, $pointer + 3) != 'e' {\n        @return _throw(\"Unexpected token: `f`.\", $pointer);\n    }\n\n    @return ($pointer + 4, false);\n",
            "line": {
                "start": 613,
                "end": 625
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "Unexpected token `f`."
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, false)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            }
        ],
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay parsing to type-specific function\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--value",
                    "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == '{' {\n            @return _json-decode--map($source, $pointer);\n        } @else if $token == '[' {\n            @return _json-decode--list($source, $pointer);\n        } @else if $token == 't' {\n            @return _json-decode--true($source, $pointer);\n        } @else if $token == 'f' {\n            @return _json-decode--false($source, $pointer);\n        } @else if $token == '\"' {\n            @return _json-decode--string($source, $pointer);\n        } @else if $token == 'n' {\n            @return _json-decode--null($source, $pointer);\n        } @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $token) {\n            @return _json-decode--number($source, $pointer);\n        } @else if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Empty JSON string.\", $pointer);\n",
                    "line": {
                        "start": 26,
                        "end": 55
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded `null`\n",
        "commentRange": {
            "start": 627,
            "end": 632
        },
        "context": {
            "type": "function",
            "name": "_json-decode--null",
            "code": "\n    $length: str-length($source);\n\n    @if $length - $pointer < 2\n  or str-slice($source, $pointer, $pointer) != 'u'\n  or str-slice($source, $pointer + 1, $pointer + 1) != 'l'\n  or str-slice($source, $pointer + 2, $pointer + 2) != 'l' {\n        @return _throw(\"Unexpected token: `n`.\", $pointer);\n    }\n\n    @return ($pointer + 3, null);\n",
            "line": {
                "start": 633,
                "end": 644
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "\"Unexpected token `n`.\""
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, null)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            }
        ],
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay parsing to type-specific function\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--value",
                    "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == '{' {\n            @return _json-decode--map($source, $pointer);\n        } @else if $token == '[' {\n            @return _json-decode--list($source, $pointer);\n        } @else if $token == 't' {\n            @return _json-decode--true($source, $pointer);\n        } @else if $token == 'f' {\n            @return _json-decode--false($source, $pointer);\n        } @else if $token == '\"' {\n            @return _json-decode--string($source, $pointer);\n        } @else if $token == 'n' {\n            @return _json-decode--null($source, $pointer);\n        } @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $token) {\n            @return _json-decode--number($source, $pointer);\n        } @else if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Empty JSON string.\", $pointer);\n",
                    "line": {
                        "start": 26,
                        "end": 55
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded number\n",
        "commentRange": {
            "start": 646,
            "end": 656
        },
        "context": {
            "type": "function",
            "name": "_json-decode--number",
            "code": "\n    $pointer: $pointer - 1; // Move back pointer to begininng of number\n    $allowed: '-' '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'; // Allowed characted to start with\n    $first: str-slice($source, $pointer, $pointer); // First character of the number\n    $minus: $first == '-'; // Is it negative?\n\n    // Early check for errors\n    @if not index($allowed, $first) {\n        @return _throw(\"Unexpected token `\" + $first + \"`.\", $pointer);\n    }\n\n    // Find the integer part\n    $find-integer: _find-integer($source, $pointer);\n    $pointer: nth($find-integer, 1);\n    $result:  nth($find-integer, 2);\n    @if not $result { // Error occured\n        @return $find-integer;\n    }\n\n    // Find digits\n    @if str-slice($source, $pointer, $pointer) == '.' {\n        $find-digits: _find-digits($source, $pointer);\n        $pointer: nth($find-digits, 1);\n        $digits:  nth($find-digits, 2);\n\n        @if $digits == null { // Empty digits, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $digits == false { // Error occured, return it\n            @return $find-digits;\n        }\n\n        $result: $result + $digits;\n    }\n\n    // Find exponent\n    @if to-lower-case(str-slice($source, $pointer, $pointer)) == 'e' {\n        $find-exponent: _find-exponent($source, $pointer);\n        $pointer:  nth($find-exponent, 1);\n        $exponent: nth($find-exponent, 2);\n\n        @if $exponent == null { // Empty exponent, throw error\n            @return _throw(\"Unexpected end of stream.\", $pointer);\n        } @else if $exponent == false { // Error occured, return it\n            @return $find-exponent;\n        }\n\n        $result: $result * _pow(10, $exponent);\n    }\n\n    @return ($pointer, if($minus, $result * -1, $result));\n",
            "line": {
                "start": 657,
                "end": 707
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "\"Unexpected token $token.\"",
            "\"Unexpected end of stream.\""
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, parsed number)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            },
            {
                "type": "function",
                "name": "_find-integer",
                "external": false
            },
            {
                "type": "function",
                "name": "_find-digits",
                "external": false
            },
            {
                "type": "function",
                "name": "_find-exponent",
                "external": false
            },
            {
                "type": "function",
                "name": "_pow",
                "external": false
            }
        ],
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay parsing to type-specific function\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--value",
                    "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == '{' {\n            @return _json-decode--map($source, $pointer);\n        } @else if $token == '[' {\n            @return _json-decode--list($source, $pointer);\n        } @else if $token == 't' {\n            @return _json-decode--true($source, $pointer);\n        } @else if $token == 'f' {\n            @return _json-decode--false($source, $pointer);\n        } @else if $token == '\"' {\n            @return _json-decode--string($source, $pointer);\n        } @else if $token == 'n' {\n            @return _json-decode--null($source, $pointer);\n        } @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $token) {\n            @return _json-decode--number($source, $pointer);\n        } @else if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Empty JSON string.\", $pointer);\n",
                    "line": {
                        "start": 26,
                        "end": 55
                    }
                }
            },
            {
                "description": "Parses a JSON encoded string to see if it's a CSS length\n",
                "context": {
                    "type": "function",
                    "name": "_length",
                    "code": "\n    @if type-of($string) == \"number\" {\n        @return $string;\n    }\n\n    $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\n    $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\n    $number: \"\";\n    $unit: \"\";\n\n    @for $i from 1 through str-length($string) {\n        $c: str-slice($string, $i, $i);\n        @if $c == ' ' or $c == \"\t\" {\n            @if $number != \"\" {\n                @return $string;\n            }\n        } @else if index('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' '-' '.', $c) {\n            $number: $number + $c;\n        } @else {\n            @if $number == \"\" {\n                @return $string;\n            }\n            $unit: $unit + $c;\n        }\n    }\n\n    $number: nth(_json-decode--number($number, 2), 2);\n    $index: index($strings, to-lower-case($unit));\n\n    @if $index and $index > 0 {\n        @return $number * nth($units, $index);\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 156,
                        "end": 190
                    }
                }
            },
            {
                "description": "Cast a stringified number / stringified percentage into number type\n",
                "context": {
                    "type": "function",
                    "name": "_get-color-value",
                    "code": "\n    $first: str-slice($string, 1, 1);\n\n    // Pad <1 values with a leading 0\n    @if $first == '.' {\n        $string: '0' + $string;\n    }\n\n    $last: str-slice($string, -1, -1);\n\n    @return if(\n            $last == '%',\n            nth(_json-decode--number(str-slice($string, 1, -2), 2), 2) * 1%,\n            nth(_json-decode--number($string, 2), 2)\n    );\n",
                    "line": {
                        "start": 241,
                        "end": 256
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded array\n",
        "commentRange": {
            "start": 709,
            "end": 717
        },
        "context": {
            "type": "function",
            "name": "_json-decode--list",
            "code": "\n    $length: str-length($source);\n    $list: ();\n    $needs-comma: false;\n\n    @if $pointer <= $length and str-slice($source, $pointer, $pointer) == \"]\" {\n        @return ($pointer + 1, $list);\n    }\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n\n        @if $token == \"]\" {\n            @if not $needs-comma and length($list) != 0 {\n                @return _throw(\"Unexpected comma in array literal.\", $pointer);\n            }\n\n            // Do it the Sass way and destruct a single item array to an element.\n            @return ($pointer + 1, if(length($list) == 1, nth($list, 1), $list));\n        } @else if $token == \" \" or $token == \"\t\" {\n            $pointer: $pointer + 1;\n        } @else if $token == \",\" {\n            @if not $needs-comma {\n                @return _throw(\"Unexpected comma in array literal.\", $pointer);\n            }\n\n            $needs-comma: false;\n            $pointer: $pointer + 1;\n        } @else {\n            @if $needs-comma {\n                @return _throw(\"Missing comma in array literal.\", $pointer);\n            }\n\n            $read: _json-decode--value($source, $pointer);\n            $pointer: nth($read, 1);\n            $list: append($list, nth($read, 2));\n            $needs-comma: true;\n        }\n    }\n\n    @return _throw(\"Unterminated array literal.\", $pointer);\n",
            "line": {
                "start": 718,
                "end": 759
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "Unexpected comma in array literal.",
            "Missing comma in array literal.",
            "Unterminated array literal."
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, parsed list)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--value",
                "external": false
            }
        ],
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay parsing to type-specific function\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--value",
                    "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == '{' {\n            @return _json-decode--map($source, $pointer);\n        } @else if $token == '[' {\n            @return _json-decode--list($source, $pointer);\n        } @else if $token == 't' {\n            @return _json-decode--true($source, $pointer);\n        } @else if $token == 'f' {\n            @return _json-decode--false($source, $pointer);\n        } @else if $token == '\"' {\n            @return _json-decode--string($source, $pointer);\n        } @else if $token == 'n' {\n            @return _json-decode--null($source, $pointer);\n        } @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $token) {\n            @return _json-decode--number($source, $pointer);\n        } @else if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Empty JSON string.\", $pointer);\n",
                    "line": {
                        "start": 26,
                        "end": 55
                    }
                }
            }
        ]
    },
    {
        "description": "Parses a JSON encoded object\n",
        "commentRange": {
            "start": 761,
            "end": 773
        },
        "context": {
            "type": "function",
            "name": "_json-decode--map",
            "code": "\n    $length: str-length($source);\n    $map: ();\n    $needs-comma: false;\n\n    // Deal with empty map\n    @if $pointer <= $length and str-slice($source, $pointer, $pointer) == \"}\" {\n        @return ($pointer + 1, $map);\n    }\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == \"}\" {\n            @if not $needs-comma and length($map) != 0 {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            @return ($pointer, $map);\n        } @else if $token == \" \" or $token == \"\t\" {\n            // @continue;\n        } @else if $token == \",\" {\n            @if not $needs-comma {\n                @return _throw(\"Unexpected comma in object literal.\", $pointer);\n            }\n            $needs-comma: false;\n        } @else if $token == '\"' {\n            @if $needs-comma {\n                @return _throw(\"Missing comma in object literal.\", $pointer);\n            }\n\n            // Read key\n            $read-key:  _json-decode--string($source, $pointer);\n            $pointer: nth($read-key, 1);\n            $key:     nth($read-key, 2);\n\n            // Remove colon\n            $pointer: _consume($source, $pointer, \":\");\n            @if length($pointer) > 1 { // If consume has failed\n                @return _throw(\"Consuming token `:` failed.\", 0);\n            }\n\n            // Read value\n            $read-value: _json-decode--value($source, $pointer);\n            $pointer: nth($read-value, 1);\n            $value:    nth($read-value, 2);\n\n            // Add pair to map\n            $map: map-merge($map, ($key: $value));\n            $needs-comma: true;\n        } @else {\n            @return _throw(\"Unexpected token `\" + $token + \"` in object literal.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Unterminated object literal.\", $pointer);\n",
            "line": {
                "start": 774,
                "end": 830
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "source",
                "description": "JSON complete source"
            },
            {
                "type": "Number",
                "name": "pointer",
                "description": "current pointer"
            }
        ],
        "throw": [
            "Unexpected comma in object literal.",
            "Unexpected token $token in object literal.",
            "Missing comma in object literal.",
            "Unterminated object literal.",
            "Consuming token `:` failed."
        ],
        "return": {
            "type": "List",
            "description": "(new pointer, map)"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw",
                "external": false
            },
            {
                "type": "function",
                "name": "_consume",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--value",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-decode--string",
                "external": false
            }
        ],
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay parsing to type-specific function\n",
                "context": {
                    "type": "function",
                    "name": "_json-decode--value",
                    "code": "\n    $length: str-length($source);\n\n    @while $pointer <= $length {\n        $token: str-slice($source, $pointer, $pointer);\n        $pointer: $pointer + 1;\n\n        @if $token == '{' {\n            @return _json-decode--map($source, $pointer);\n        } @else if $token == '[' {\n            @return _json-decode--list($source, $pointer);\n        } @else if $token == 't' {\n            @return _json-decode--true($source, $pointer);\n        } @else if $token == 'f' {\n            @return _json-decode--false($source, $pointer);\n        } @else if $token == '\"' {\n            @return _json-decode--string($source, $pointer);\n        } @else if $token == 'n' {\n            @return _json-decode--null($source, $pointer);\n        } @else if index('1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '.', $token) {\n            @return _json-decode--number($source, $pointer);\n        } @else if $token == ' ' or $token == \"\t\" {\n            // @continue;\n        } @else {\n            @return _throw(\"Unexpected token `#{$token}`.\", $pointer);\n        }\n    }\n\n    @return _throw(\"Empty JSON string.\", $pointer);\n",
                    "line": {
                        "start": 26,
                        "end": 55
                    }
                }
            }
        ]
    },
    {
        "description": "Parse a JSON string\n",
        "commentRange": {
            "start": 832,
            "end": 837
        },
        "context": {
            "type": "function",
            "name": "json-decode",
            "code": "\n    $length: str-length($json);\n    $pointer: 1;\n    $value: null;\n\n    @if $json == null {\n        @return _throw(\"Input string may not be null.\", $pointer);\n    }\n\n    @while $value != false // Stop if error\n  and $pointer <= $length {\n        $read: _json-decode--value($json, $pointer);\n        $pointer: nth($read, 1);\n        $value: nth($read, 2);\n    }\n\n    @return $value;\n",
            "line": {
                "start": 838,
                "end": 855
            }
        },
        "access": "public",
        "parameter": [
            {
                "type": "String",
                "name": "json",
                "description": "JSON string to parse"
            }
        ],
        "throw": [
            "Input string may not be null."
        ],
        "return": {
            "type": "*"
        },
        "require": [
            {
                "type": "function",
                "name": "_throw"
            },
            {
                "type": "function",
                "name": "_json-decode--value",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        }
    },
    {
        "description": "Proof quote a value\n",
        "commentRange": {
            "start": 857,
            "end": 860
        },
        "context": {
            "type": "function",
            "name": "_proof-quote",
            "code": "\n    // $value: to-string($value);\n    @return '\"#{$value}\"';\n",
            "line": {
                "start": 862,
                "end": 865
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "value to be quoted"
            }
        ],
        "return": {
            "type": "String",
            "description": "quoted value"
        },
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Encode a color to JSON\n",
                "context": {
                    "type": "function",
                    "name": "_json-encode--color",
                    "code": "\n    @return _proof-quote($color);\n",
                    "line": {
                        "start": 880,
                        "end": 882
                    }
                }
            },
            {
                "description": "Encode a map to JSON\n",
                "context": {
                    "type": "function",
                    "name": "_json-encode--map",
                    "code": "\n    $str: \"\";\n\n    @each $key, $value in $map {\n        $str: $str + ', ' + _proof-quote($key) + ': ' + json-encode($value);\n    }\n\n    @return '{' + str-slice($str, 3) + '}';\n",
                    "line": {
                        "start": 905,
                        "end": 913
                    }
                }
            },
            {
                "description": "Encode a number to JSON\n",
                "context": {
                    "type": "function",
                    "name": "_json-encode--number",
                    "code": "\n    @return if(unitless($number), $number, _proof-quote($number));\n",
                    "line": {
                        "start": 920,
                        "end": 922
                    }
                }
            },
            {
                "description": "Encode a string to JSON\n",
                "context": {
                    "type": "function",
                    "name": "_json-encode--string",
                    "code": "\n    @return _proof-quote($string);\n",
                    "line": {
                        "start": 929,
                        "end": 931
                    }
                }
            }
        ]
    },
    {
        "description": "Encode a bool to JSON\n",
        "commentRange": {
            "start": 867,
            "end": 870
        },
        "context": {
            "type": "function",
            "name": "_json-encode--bool",
            "code": "\n    @return $boolean;\n",
            "line": {
                "start": 871,
                "end": 873
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "Bool",
                "name": "bool",
                "description": "bool to be encoded"
            }
        ],
        "return": {
            "type": "Bool",
            "description": "encoded bool"
        },
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay the encoding of ta literal to JSON to a type-specific method\n",
                "context": {
                    "type": "function",
                    "name": "json-encode",
                    "code": "\n    $type: type-of($value);\n\n    @if function_exists('_json-encode--#{$type}') {\n        @return call('_json-encode--#{$type}', $value);\n    }\n\n    @error \"Unknown type for #{$value} (#{$type}).\";\n",
                    "line": {
                        "start": 994,
                        "end": 1002
                    }
                }
            }
        ]
    },
    {
        "description": "Encode a color to JSON\n",
        "commentRange": {
            "start": 875,
            "end": 879
        },
        "context": {
            "type": "function",
            "name": "_json-encode--color",
            "code": "\n    @return _proof-quote($color);\n",
            "line": {
                "start": 880,
                "end": 882
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "color to be encoded"
            }
        ],
        "return": {
            "type": "String",
            "description": "encoded color"
        },
        "require": [
            {
                "type": "function",
                "name": "_proof-quote",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay the encoding of ta literal to JSON to a type-specific method\n",
                "context": {
                    "type": "function",
                    "name": "json-encode",
                    "code": "\n    $type: type-of($value);\n\n    @if function_exists('_json-encode--#{$type}') {\n        @return call('_json-encode--#{$type}', $value);\n    }\n\n    @error \"Unknown type for #{$value} (#{$type}).\";\n",
                    "line": {
                        "start": 994,
                        "end": 1002
                    }
                }
            }
        ]
    },
    {
        "description": "Encode a list to JSON\n",
        "commentRange": {
            "start": 884,
            "end": 888
        },
        "context": {
            "type": "function",
            "name": "_json-encode--list",
            "code": "\n    $str: \"\";\n\n    @each $item in $list {\n        $str: $str + ', ' + json-encode($item);\n    }\n\n    @return '[' + str-slice($str, 3) + ']';\n",
            "line": {
                "start": 889,
                "end": 897
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "list to be encoded"
            }
        ],
        "return": {
            "type": "String",
            "description": "encoded list"
        },
        "require": [
            {
                "type": "function",
                "name": "json-encode"
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay the encoding of ta literal to JSON to a type-specific method\n",
                "context": {
                    "type": "function",
                    "name": "json-encode",
                    "code": "\n    $type: type-of($value);\n\n    @if function_exists('_json-encode--#{$type}') {\n        @return call('_json-encode--#{$type}', $value);\n    }\n\n    @error \"Unknown type for #{$value} (#{$type}).\";\n",
                    "line": {
                        "start": 994,
                        "end": 1002
                    }
                }
            }
        ]
    },
    {
        "description": "Encode a map to JSON\n",
        "commentRange": {
            "start": 899,
            "end": 904
        },
        "context": {
            "type": "function",
            "name": "_json-encode--map",
            "code": "\n    $str: \"\";\n\n    @each $key, $value in $map {\n        $str: $str + ', ' + _proof-quote($key) + ': ' + json-encode($value);\n    }\n\n    @return '{' + str-slice($str, 3) + '}';\n",
            "line": {
                "start": 905,
                "end": 913
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "map to be encoded"
            }
        ],
        "return": {
            "type": "String",
            "description": "encoded map"
        },
        "require": [
            {
                "type": "function",
                "name": "_proof-quote",
                "external": false
            },
            {
                "type": "function",
                "name": "json-encode",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay the encoding of ta literal to JSON to a type-specific method\n",
                "context": {
                    "type": "function",
                    "name": "json-encode",
                    "code": "\n    $type: type-of($value);\n\n    @if function_exists('_json-encode--#{$type}') {\n        @return call('_json-encode--#{$type}', $value);\n    }\n\n    @error \"Unknown type for #{$value} (#{$type}).\";\n",
                    "line": {
                        "start": 994,
                        "end": 1002
                    }
                }
            }
        ]
    },
    {
        "description": "Encode a number to JSON\n",
        "commentRange": {
            "start": 915,
            "end": 919
        },
        "context": {
            "type": "function",
            "name": "_json-encode--number",
            "code": "\n    @return if(unitless($number), $number, _proof-quote($number));\n",
            "line": {
                "start": 920,
                "end": 922
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "number to be encoded"
            }
        ],
        "return": {
            "type": "String",
            "description": "encoded number"
        },
        "require": [
            {
                "type": "function",
                "name": "_proof-quote",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay the encoding of ta literal to JSON to a type-specific method\n",
                "context": {
                    "type": "function",
                    "name": "json-encode",
                    "code": "\n    $type: type-of($value);\n\n    @if function_exists('_json-encode--#{$type}') {\n        @return call('_json-encode--#{$type}', $value);\n    }\n\n    @error \"Unknown type for #{$value} (#{$type}).\";\n",
                    "line": {
                        "start": 994,
                        "end": 1002
                    }
                }
            }
        ]
    },
    {
        "description": "Encode a string to JSON\n",
        "commentRange": {
            "start": 924,
            "end": 928
        },
        "context": {
            "type": "function",
            "name": "_json-encode--string",
            "code": "\n    @return _proof-quote($string);\n",
            "line": {
                "start": 929,
                "end": 931
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "string to be encoded"
            }
        ],
        "return": {
            "type": "String",
            "description": "encoded string"
        },
        "require": [
            {
                "type": "function",
                "name": "_proof-quote",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay the encoding of ta literal to JSON to a type-specific method\n",
                "context": {
                    "type": "function",
                    "name": "json-encode",
                    "code": "\n    $type: type-of($value);\n\n    @if function_exists('_json-encode--#{$type}') {\n        @return call('_json-encode--#{$type}', $value);\n    }\n\n    @error \"Unknown type for #{$value} (#{$type}).\";\n",
                    "line": {
                        "start": 994,
                        "end": 1002
                    }
                }
            }
        ]
    },
    {
        "description": "Encode `null` to JSON\n",
        "commentRange": {
            "start": 933,
            "end": 936
        },
        "context": {
            "type": "function",
            "name": "_json-encode--null",
            "code": "\n    @return \"null\";\n",
            "line": {
                "start": 937,
                "end": 939
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "Null",
                "name": "null",
                "description": "`null`"
            }
        ],
        "return": {
            "type": "String"
        },
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Delay the encoding of ta literal to JSON to a type-specific method\n",
                "context": {
                    "type": "function",
                    "name": "json-encode",
                    "code": "\n    $type: type-of($value);\n\n    @if function_exists('_json-encode--#{$type}') {\n        @return call('_json-encode--#{$type}', $value);\n    }\n\n    @error \"Unknown type for #{$value} (#{$type}).\";\n",
                    "line": {
                        "start": 994,
                        "end": 1002
                    }
                }
            }
        ]
    },
    {
        "description": "JSON.stringify a value and pass it as a font-family of head element\n",
        "commentRange": {
            "start": 941,
            "end": 945
        },
        "context": {
            "type": "mixin",
            "name": "json-encode",
            "code": "\n    $flag: if(index(\"all\" \"regular\" \"media\" \"comment\", $flag), $flag, \"all\");\n    $json: json-encode($value);\n\n    // Persistent comment\n    @if $flag == \"comment\" or $flag == \"all\" {\n        /*! json-encode: #{$json} */\n    }\n    // Regular property value pair\n    @if $flag == \"regular\" or $flag == \"all\" {\n        // All browsers except IE8-\n        body::before {\n            // This element must be in the render tree to get it via getComputedStyle(document.body, ':before');\n            content: json-encode($value);\n            display: block;\n            height: 0;\n            overflow: hidden;\n            width: 0;\n        }\n\n        // All browsers except Opera (Presto based)\n        head {\n            font-family: json-encode($value);\n        }\n    }\n\n    // Falsy media query\n    @if $flag == \"media\" or $flag == \"all\" {\n        @media -json-encode {\n            json {\n                json: $json;\n            }\n        }\n    }\n",
            "line": {
                "start": 946,
                "end": 980
            }
        },
        "access": "public",
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "value to be stringified"
            },
            {
                "type": "String",
                "name": "flag",
                "description": "(all) - output driver"
            }
        ],
        "require": [
            {
                "type": "function",
                "name": "json-encode",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        }
    },
    {
        "description": "Delay the encoding of ta literal to JSON to a type-specific method\n",
        "commentRange": {
            "start": 982,
            "end": 993
        },
        "context": {
            "type": "function",
            "name": "json-encode",
            "code": "\n    $type: type-of($value);\n\n    @if function_exists('_json-encode--#{$type}') {\n        @return call('_json-encode--#{$type}', $value);\n    }\n\n    @error \"Unknown type for #{$value} (#{$type}).\";\n",
            "line": {
                "start": 994,
                "end": 1002
            }
        },
        "access": "public",
        "parameter": [
            {
                "type": "*",
                "name": "value",
                "description": "value to be stringified"
            }
        ],
        "throw": [
            "Unknown type for #{$value} (#{$type})."
        ],
        "return": {
            "type": "String",
            "description": "JSON encoded string"
        },
        "require": [
            {
                "type": "function",
                "name": "_json-encode--string",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-encode--number",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-encode--list",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-encode--map",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-encode--null",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-encode--color",
                "external": false
            },
            {
                "type": "function",
                "name": "_json-encode--bool",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_SassyJSON.scss",
            "name": "_SassyJSON.scss"
        },
        "usedBy": [
            {
                "description": "Encode a list to JSON\n",
                "context": {
                    "type": "function",
                    "name": "_json-encode--list",
                    "code": "\n    $str: \"\";\n\n    @each $item in $list {\n        $str: $str + ', ' + json-encode($item);\n    }\n\n    @return '[' + str-slice($str, 3) + ']';\n",
                    "line": {
                        "start": 889,
                        "end": 897
                    }
                }
            },
            {
                "description": "Encode a map to JSON\n",
                "context": {
                    "type": "function",
                    "name": "_json-encode--map",
                    "code": "\n    $str: \"\";\n\n    @each $key, $value in $map {\n        $str: $str + ', ' + _proof-quote($key) + ': ' + json-encode($value);\n    }\n\n    @return '{' + str-slice($str, 3) + '}';\n",
                    "line": {
                        "start": 905,
                        "end": 913
                    }
                }
            },
            {
                "description": "JSON.stringify a value and pass it as a font-family of head element\n",
                "context": {
                    "type": "mixin",
                    "name": "json-encode",
                    "code": "\n    $flag: if(index(\"all\" \"regular\" \"media\" \"comment\", $flag), $flag, \"all\");\n    $json: json-encode($value);\n\n    // Persistent comment\n    @if $flag == \"comment\" or $flag == \"all\" {\n        /*! json-encode: #{$json} */\n    }\n    // Regular property value pair\n    @if $flag == \"regular\" or $flag == \"all\" {\n        // All browsers except IE8-\n        body::before {\n            // This element must be in the render tree to get it via getComputedStyle(document.body, ':before');\n            content: json-encode($value);\n            display: block;\n            height: 0;\n            overflow: hidden;\n            width: 0;\n        }\n\n        // All browsers except Opera (Presto based)\n        head {\n            font-family: json-encode($value);\n        }\n    }\n\n    // Falsy media query\n    @if $flag == \"media\" or $flag == \"all\" {\n        @media -json-encode {\n            json {\n                json: $json;\n            }\n        }\n    }\n",
                    "line": {
                        "start": 946,
                        "end": 980
                    }
                }
            }
        ]
    },
    {
        "description": "https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/\n",
        "commentRange": {
            "start": 1,
            "end": 1
        },
        "context": {
            "type": "css",
            "name": "/// Mixin to manage responsive breakpoints\n/// @author Hugo Giraudel\n/// @param",
            "value": "String",
            "line": {
                "start": 5,
                "end": 22
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_breakpoints.scss",
            "name": "_breakpoints.scss"
        }
    },
    {
        "description": "Mixin to manage responsive breakpoints\n",
        "commentRange": {
            "start": 3,
            "end": 6
        },
        "context": {
            "type": "mixin",
            "name": "respond-to",
            "code": "\n    // If the key exists in the map\n    @if map-has-key($grid-breakpoints, $breakpoint) {\n        // Prints a media query based on the value\n        @media #{inspect(map-get($grid-breakpoints, $breakpoint))} {\n            @content;\n        }\n    }\n\n        // If the key doesn't exist in the map\n    @else {\n        @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n        + \"Available breakpoints are: #{map-keys($grid-breakpoints)}.\";\n    }\n",
            "line": {
                "start": 7,
                "end": 21
            }
        },
        "author": [
            "Hugo Giraudel"
        ],
        "parameter": [
            {
                "type": "String",
                "name": "breakpoint",
                "description": "Breakpoint name"
            }
        ],
        "require": [],
        "access": "public",
        "content": "",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_breakpoints.scss",
            "name": "_breakpoints.scss"
        }
    },
    {
        "description": "https://css-tricks.com/snippets/sass/deep-getset-maps/\n",
        "commentRange": {
            "start": 1,
            "end": 1
        },
        "context": {
            "type": "css",
            "name": "/// Map deep get\n/// @author Hugo Giraudel\n/// @access public\n/// @param",
            "value": "Map",
            "line": {
                "start": 7,
                "end": 65
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "functions/_deep-getset-maps.scss",
            "name": "_deep-getset-maps.scss"
        }
    },
    {
        "description": "Map deep get\n",
        "commentRange": {
            "start": 4,
            "end": 9
        },
        "context": {
            "type": "function",
            "name": "map-deep-get",
            "code": "\n    @each $key in $keys {\n        $map: map-get($map, $key);\n    }\n    @return $map;\n",
            "line": {
                "start": 10,
                "end": 15
            }
        },
        "author": [
            "Hugo Giraudel"
        ],
        "access": "public",
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "Map"
            },
            {
                "type": "Arglist",
                "name": "keys",
                "description": "Key chain"
            }
        ],
        "return": {
            "type": "*",
            "description": "Desired value"
        },
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_deep-getset-maps.scss",
            "name": "_deep-getset-maps.scss"
        }
    },
    {
        "description": "Deep set function to set a value in nested maps\n",
        "commentRange": {
            "start": 17,
            "end": 23
        },
        "context": {
            "type": "function",
            "name": "map-deep-set",
            "code": "\n    $maps: ($map,);\n    $result: null;\n\n    // If the last key is a map already\n    // Warn the user we will be overriding it with $value\n    @if type-of(nth($keys, -1)) == \"map\" {\n        @warn \"The last key you specified is a map; it will be overrided with `#{$value}`.\";\n    }\n\n    // If $keys is a single key\n    // Just merge and return\n    @if length($keys) == 1 {\n        @return map-merge($map, ($keys: $value));\n    }\n\n    // Loop from the first to the second to last key from $keys\n    // Store the associated map to this key in the $maps list\n    // If the key doesn't exist, throw an error\n    @for $i from 1 through length($keys) - 1 {\n        $current-key: nth($keys, $i);\n        $current-map: nth($maps, -1);\n        $current-get: map-get($current-map, $current-key);\n        @if $current-get == null {\n           // @error \"Key `#{$key}` doesn't exist at current level in map.\";\n        }\n        $maps: append($maps, $current-get);\n    }\n\n    // Loop from the last map to the first one\n    // Merge it with the previous one\n    @for $i from length($maps) through 1 {\n        $current-map: nth($maps, $i);\n        $current-key: nth($keys, $i);\n        $current-val: if($i == length($maps), $value, $result);\n        $result: map-merge($current-map, ($current-key: $current-val));\n    }\n\n    // Return result\n    @return $result;\n",
            "line": {
                "start": 24,
                "end": 64
            }
        },
        "author": [
            "Hugo Giraudel"
        ],
        "access": "public",
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "Map"
            },
            {
                "type": "List",
                "name": "keys",
                "description": "Key chaine"
            },
            {
                "type": "*",
                "name": "value",
                "description": "Value to assign"
            }
        ],
        "return": {
            "type": "Map"
        },
        "group": [
            "undefined"
        ],
        "require": [],
        "throw": [
            "Key `#{$key}` doesn"
        ],
        "file": {
            "path": "functions/_deep-getset-maps.scss",
            "name": "_deep-getset-maps.scss"
        }
    },
    {
        "description": "Bootstrap Colorpicker\nhttp://mjolnic.github.io/bootstrap-colorpicker/\n\nOriginally written by (c) 2012 Stefan Petre\nLicensed under the Apache License v2.0\nhttp://www.apache.org/licenses/LICENSE-2.0.txt\n\n\n",
        "commentRange": {
            "start": 2,
            "end": 9
        },
        "context": {
            "type": "css",
            "name": ".colorpicker-saturation",
            "value": "float: left;\n  width: 100px;\n  height: 100px;\n  cursor: crosshair;\n  background-image: image_url(\"bootstrap-colorpicker/saturation.png\");",
            "line": {
                "start": 11,
                "end": 252
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap-colorpicker.scss",
            "name": "_bootstrap-colorpicker.scss"
        }
    },
    {
        "description": "zoom: 1;\n",
        "commentRange": {
            "start": 91,
            "end": 91
        },
        "context": {
            "type": "css",
            "name": "}\n\n.colorpicker:before,\n.colorpicker:after",
            "value": "display: table;\n  line-height: 0;\n  content: \"\";",
            "line": {
                "start": 95,
                "end": 252
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap-colorpicker.scss",
            "name": "_bootstrap-colorpicker.scss"
        }
    },
    {
        "description": "display: inline;\n",
        "commentRange": {
            "start": 29,
            "end": 29
        },
        "context": {
            "type": "css",
            "name": "}\n\n.editable-buttons.editable-buttons-bottom",
            "value": "display: block; \n   margin-top: 7px;\n   margin-left: 0;",
            "line": {
                "start": 32,
                "end": 664
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap3-editable.scss",
            "name": "_bootstrap3-editable.scss"
        }
    },
    {
        "description": "display: inline;   \n",
        "commentRange": {
            "start": 45,
            "end": 45
        },
        "context": {
            "type": "css",
            "name": "}\n\n.editable-buttons .editable-cancel",
            "value": "margin-left: 7px;",
            "line": {
                "start": 48,
                "end": 664
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap3-editable.scss",
            "name": "_bootstrap3-editable.scss"
        }
    },
    {
        "description": "display: inline;    \n",
        "commentRange": {
            "start": 162,
            "end": 162
        },
        "context": {
            "type": "css",
            "name": "}\n\n.editable-container.ui-widget",
            "value": "font-size: inherit;  /* jqueryui widget font 1.1em too big, overwrite it */\n   z-index: 9990; /* should be less than select2 dropdown z-index to close dropdown first when click */",
            "line": {
                "start": 165,
                "end": 664
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap3-editable.scss",
            "name": "_bootstrap3-editable.scss"
        }
    },
    {
        "description": "Datepicker for Bootstrap\n\nCopyright 2012 Stefan Petre\nImprovements by Andrew Rowls\nLicensed under the Apache License v2.0\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n",
        "commentRange": {
            "start": 216,
            "end": 223
        },
        "context": {
            "type": "css",
            "name": ".datepicker",
            "value": "padding: 4px;\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  direction: ltr;\n  /*.dow {\n\t\tborder-top: 1px solid #ddd !important;\n\t}*/",
            "line": {
                "start": 224,
                "end": 664
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap3-editable.scss",
            "name": "_bootstrap3-editable.scss"
        }
    },
    {
        "description": "display: inline;\n",
        "commentRange": {
            "start": 20,
            "end": 20
        },
        "context": {
            "type": "css",
            "name": "&.editable-buttons-bottom",
            "value": "display: block; \n    margin-top: 7px;\n    margin-left: 0;",
            "line": {
                "start": 22,
                "end": 349
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap3-xeditable.scss",
            "name": "_bootstrap3-xeditable.scss"
        }
    },
    {
        "description": "display: inline;   \n",
        "commentRange": {
            "start": 36,
            "end": 36
        },
        "context": {
            "type": "css",
            "name": "}\n\n.editable-buttons .editable-cancel",
            "value": "margin-left: 7px;",
            "line": {
                "start": 39,
                "end": 349
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap3-xeditable.scss",
            "name": "_bootstrap3-xeditable.scss"
        }
    },
    {
        "description": "display: inline;    \n",
        "commentRange": {
            "start": 150,
            "end": 150
        },
        "context": {
            "type": "css",
            "name": "}\n\n.editable-container.ui-widget",
            "value": "font-size: inherit;  /* jqueryui widget font 1.1em too big, overwrite it */\n  z-index: 9990; /* should be less than select2 dropdown z-index to close dropdown first when click */",
            "line": {
                "start": 153,
                "end": 349
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap3-xeditable.scss",
            "name": "_bootstrap3-xeditable.scss"
        }
    },
    {
        "description": "x-editable CSS\n",
        "commentRange": {
            "start": 203,
            "end": 204
        },
        "context": {
            "type": "css",
            "name": ".editable-address",
            "value": "display: block;\n  margin-bottom: 5px;",
            "line": {
                "start": 205,
                "end": 349
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap3-xeditable.scss",
            "name": "_bootstrap3-xeditable.scss"
        }
    },
    {
        "description": "Datepicker for Bootstrap\n\nCopyright 2012 Stefan Petre\nLicensed under the Apache License v2.0\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n",
        "commentRange": {
            "start": 216,
            "end": 222
        },
        "context": {
            "type": "css",
            "name": ".editable-input .datepicker",
            "value": "top: 0;\n\tleft: 0;\n\tpadding: 4px;\n\t&:before {\n\t\tcontent: '';\n\t\tdisplay: inline-block;\n\t\tborder-left:   7px solid transparent;\n\t\tborder-right:  7px solid transparent;\n\t\tborder-bottom: 7px solid #ccc;\n\t\tborder-bottom-color: rgba(0,0,0,.2);\n\t\tposition: absolute;\n\t\ttop: -7px;\n\t\tleft: 6px;\n\t}\n\t&:after {\n\t\tcontent: '';\n\t\tdisplay: inline-block;\n\t\tborder-left:   6px solid transparent;\n\t\tborder-right:  6px solid transparent;\n\t\tborder-bottom: 6px solid $white;\n\t\tposition: absolute;\n\t\ttop: -6px;\n\t\tleft: 7px;\n\t}\n\t> div {\n\t\tdisplay: none;\n\t}\n\ttable {\n\t\twidth: 100%;\n\t\tmin-width: 214px;\n\t\tmargin: 0;\n\t}\n\ttd,\tth {\n\t\ttext-align: center;\n\t\twidth: 24px;\n\t\theight: 20px;\n\t}\n\ttd {\n\t\t&.day:hover {\n\t\t\tbackground: $gray-lighter;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t&.day.disabled {\n\t\t\tcolor: $gray;\n\t\t}\n\t\t&.old, &.new {\n\t\t\tcolor: $gray;\n\t\t}\n\t\t&.active, &.active:hover {\n\t\t\tbackground:$brand-primary;\n\t\t\tcolor: #fff;\n\t\t\ttext-shadow: 0 -1px 0 rgba(0,0,0,.25);\n\t\t\tborder-radius:3px;\n\t\t}\n\t\tspan {\n\t\t\tdisplay: block;\n\t\t\twidth: 47px;\n\t\t\theight: 54px;\n\t\t\tline-height: 54px;\n\t\t\tfloat: left;\n\t\t\tmargin: 2px;\n\t\t\tcursor: pointer;\n\t\t\t&:hover {\n\t\t\t\tbackground: $gray-lighter;\n\t\t\t}\n\t\t\t&.active {\n\t\t\t\tbackground:$brand-primary;\n\t\t\t\tcolor: #fff;\n\t\t\t\ttext-shadow: 0 -1px 0 rgba(0,0,0,.25);\n\t\t\t\tborder-radius:3px;\n\t\t\t}\n\t\t\t&.old {\n\t\t\t\tcolor: $gray;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tth {\n\t\t&.switch {\n\t\t\twidth: 145px;\n\t\t}\n\t\t&.next, &.prev {\n\t\t\tfont-size: $font-size-base * 1.5;\n\t\t}\n\t}\n\t\n\tthead tr:first-child th {\n\t\tcursor: pointer;\n\t\t&:hover{\n\t\t\tbackground: $gray-lighter;\n\t\t}\n\t}\n\t/*.dow {\n\t\tborder-top: 1px solid #ddd !important;\n\t}*/",
            "line": {
                "start": 223,
                "end": 349
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_bootstrap3-xeditable.scss",
            "name": "_bootstrap3-xeditable.scss"
        }
    },
    {
        "description": "\n",
        "commentRange": {
            "start": 816,
            "end": 816
        },
        "context": {
            "type": "css",
            "name": "}\n    .jstree-default-responsive .jstree-icon",
            "value": "background-image: image_url(\"jstree/40px.png\");",
            "line": {
                "start": 818,
                "end": 1056
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_jstree2.scss",
            "name": "_jstree2.scss"
        }
    },
    {
        "description": "\n",
        "commentRange": {
            "start": 367,
            "end": 367
        },
        "context": {
            "type": "css",
            "name": "}\n\n.mCSB_scrollTools .mCSB_buttonDown",
            "value": "",
            "line": {
                "start": 370,
                "end": 424
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_mCustomScrollbar.scss",
            "name": "_mCustomScrollbar.scss"
        }
    },
    {
        "description": "\n",
        "commentRange": {
            "start": 376,
            "end": 376
        },
        "context": {
            "type": "css",
            "name": "}\n\n.mCSB_scrollTools .mCSB_buttonLeft",
            "value": "",
            "line": {
                "start": 379,
                "end": 424
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_mCustomScrollbar.scss",
            "name": "_mCustomScrollbar.scss"
        }
    },
    {
        "description": "\n",
        "commentRange": {
            "start": 385,
            "end": 385
        },
        "context": {
            "type": "css",
            "name": "}\n\n.mCSB_scrollTools .mCSB_buttonRight",
            "value": "",
            "line": {
                "start": 388,
                "end": 424
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_mCustomScrollbar.scss",
            "name": "_mCustomScrollbar.scss"
        }
    },
    {
        "description": "\n",
        "commentRange": {
            "start": 394,
            "end": 394
        },
        "context": {
            "type": "css",
            "name": "}\n\n.mCSB_scrollTools .mCSB_buttonUp:hover,\n.mCSB_scrollTools .mCSB_buttonDown:hover,\n.mCSB_scrollTools .mCSB_buttonLeft:hover,\n.mCSB_scrollTools .mCSB_buttonRight:hover",
            "value": "opacity: 0.75; filter: \"alpha(opacity=75)\"; -ms-filter: \"alpha(opacity=75)\";",
            "line": {
                "start": 400,
                "end": 424
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_mCustomScrollbar.scss",
            "name": "_mCustomScrollbar.scss"
        }
    },
    {
        "description": "display: inline;\n",
        "commentRange": {
            "start": 14,
            "end": 14
        },
        "context": {
            "type": "css",
            "name": "vertical-align: middle;\n  .select2-choice",
            "value": "display: block;\n    height: 32px;\n    padding: 0 0 0 8px;\n    overflow: hidden;\n    position: relative;\n\n    border: 1px solid #ccc;\n    white-space: nowrap;\n    line-height: 32px;\n    color: #444;\n    text-decoration: none;\n\n\n    background-clip: padding-box;\n\n    -webkit-touch-callout: none;\n      -webkit-user-select: none;\n         -moz-user-select: none;\n          -ms-user-select: none;\n              user-select: none;\n\n    background-color: #fff;\n    abbr {\n      display: none;\n      width: 12px;\n      height: 12px;\n      position: absolute;\n      right: 24px;\n      top: 8px;\n\n      font-size: 1px;\n      text-decoration: none;\n\n      border: 0;\n      /*background: image_url(\"select2/select2.png\") right top no-repeat;*/\n      cursor: pointer;\n      outline: 0;\n      &:hover {\n          /*background-position: right -11px;*/\n          cursor: pointer;\n      }\n    }\n    > .select2-chosen {\n      margin-right: 26px;\n      display: block;\n      overflow: hidden;\n\n      white-space: nowrap;\n\n      text-overflow: ellipsis;\n    }\n    .select2-arrow {\n      display: inline-block;\n      width: 34px;\n      height: 100%;\n      position: absolute;\n      right: 0;\n      top: 0;\n\n      border-left: 1px solid #ccc;\n\n      background-clip: padding-box;\n\n      background: #eee;\n      b {\n        display: block;\n        width: 100%;\n        height: 100%;\n        display: inline-block;\n        font-family: FontAwesome;\n        font-style: normal;\n        font-weight: normal;\n        line-height: 1;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        position: relative;\n        font-size:14px;\n        &:before {\n          content: \"\\f107\";\n          width: 100%;\n          height: 100%;\n          text-align:center;\n          display:block;\n        }\n      }\n    }",
            "line": {
                "start": 16,
                "end": 600
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_select2.scss",
            "name": "_select2.scss"
        }
    },
    {
        "description": "\n",
        "commentRange": {
            "start": 119,
            "end": 119
        },
        "context": {
            "type": "css",
            "name": "-webkit-box-sizing: border-box; /* webkit */\n     -moz-box-sizing: border-box; /* firefox */\n          box-sizing: border-box; /* css3 */\n}\n\n.select2-drop-mask",
            "value": "border: 0;\n  margin: 0;\n  padding: 0;\n  position: fixed;\n  left: 0;\n  top: 0;\n  min-height: 100%;\n  min-width: 100%;\n  height: auto;\n  width: auto;\n  opacity: 0;\n  z-index: 9998;\n  /* styles required for IE to work */\n  background: #fff;\n  filter: alpha(opacity=0);",
            "line": {
                "start": 125,
                "end": 600
            }
        },
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_select2.scss",
            "name": "_select2.scss"
        }
    },
    {
        "description": "*\n",
        "commentRange": {
            "start": 1,
            "end": 1
        },
        "context": {
            "type": "css",
            "name": "Spectrum Colorpicker v1.7.1\nhttps://github.com/bgrins/spectrum\nAuthor: Brian Grinstead\nLicense: MIT\n***/\n\n.sp-container",
            "value": "position:absolute;\n    top:0;\n    left:0;\n    display:inline-block;\n///display: inline;\n///zoom: 1;\n    /* https://github.com/bgrins/spectrum/issues/40 */\n    z-index: 9999994;\n    overflow: hidden;",
            "line": {
                "start": 8,
                "end": 508
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_spectrum.scss",
            "name": "_spectrum.scss"
        }
    },
    {
        "description": "display: inline;\nzoom: 1;\n",
        "commentRange": {
            "start": 13,
            "end": 14
        },
        "context": {
            "type": "css",
            "name": "/* https://github.com/bgrins/spectrum/issues/40 */\n    z-index: 9999994;\n    overflow: hidden;\n}\n.sp-container.sp-flat",
            "value": "position: relative;",
            "line": {
                "start": 19,
                "end": 508
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_spectrum.scss",
            "name": "_spectrum.scss"
        }
    },
    {
        "description": "\n",
        "commentRange": {
            "start": 186,
            "end": 186
        },
        "context": {
            "type": "css",
            "name": ".sp-1",
            "value": "height:17%;\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff0000', endColorstr='#ffff00');",
            "line": {
                "start": 187,
                "end": 508
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_spectrum.scss",
            "name": "_spectrum.scss"
        }
    },
    {
        "description": "zoom: 1;\ndisplay: inline;\n",
        "commentRange": {
            "start": 371,
            "end": 372
        },
        "context": {
            "type": "css",
            "name": "border: solid 1px #91765d;\n    background: #eee;\n    color: #333;\n    vertical-align: middle;\n}\n.sp-replacer:hover, .sp-replacer.sp-active",
            "value": "border-color: #F0C49B;\n    color: #111;",
            "line": {
                "start": 378,
                "end": 508
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_spectrum.scss",
            "name": "_spectrum.scss"
        }
    },
    {
        "description": "width: 220px;\n",
        "commentRange": {
            "start": 405,
            "end": 405
        },
        "context": {
            "type": "css",
            "name": "max-width: 220px;\n}\n.sp-palette .sp-thumb-el",
            "value": "width:16px;\n    height: 16px;\n    margin:2px 1px;\n    border: solid 1px #d0d0d0;",
            "line": {
                "start": 408,
                "end": 508
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/_spectrum.scss",
            "name": "_spectrum.scss"
        }
    },
    {
        "description": "\n",
        "commentRange": {
            "start": 135,
            "end": 135
        },
        "context": {
            "type": "css",
            "name": ".jstree-themeicon-custom",
            "value": "background-color: transparent;\n        background-image: none;\n        background-position: 0 0;",
            "line": {
                "start": 137,
                "end": 156
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "plugins/jstree/_responsive.scss",
            "name": "_responsive.scss"
        }
    },
    {
        "description": "\n",
        "commentRange": {
            "start": 117,
            "end": 117
        },
        "context": {
            "type": "css",
            "name": "}\n\n@each $color-name, $color-variants in $material-colors",
            "value": "@include make-color-variant($color-name);",
            "line": {
                "start": 120,
                "end": 123
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "themes/_component-color-variants.scss",
            "name": "_component-color-variants.scss"
        }
    }
]
