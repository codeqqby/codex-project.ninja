<file path="codex/vendor/laravel/framework/src/Illuminate/Contracts/Container/Container.php" generated-path="codex.vendor.laravel.framework.src.Illuminate.Contracts.Container.Container.html" hash="0b3105f4c5fd8dcd108e50ef33963696" package="Default">
    <docblock line="0">
      <description/>
      <long-description/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Closure">\Closure</namespace-alias>
    <interface namespace="Illuminate\Contracts\Container" line="7" package="Default">
      <name>Container</name>
      <full_name>\Illuminate\Contracts\Container\Container</full_name>
      <docblock line="7">
        <description/>
        <long-description/>
        <tag name="package" line="7" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="15" package="Default">
        <name>bound</name>
        <full_name>\Illuminate\Contracts\Container\Container::bound()</full_name>
        <docblock line="15">
          <description>Determine if the given abstract type has been bound.</description>
          <long-description/>
          <tag name="param" line="15" description="" type="string" variable="$abstract">
            <type>string</type>
          </tag>
          <tag name="return" line="15" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="24" package="Default">
        <name>alias</name>
        <full_name>\Illuminate\Contracts\Container\Container::alias()</full_name>
        <docblock line="24">
          <description>Alias a type to a different name.</description>
          <long-description/>
          <tag name="param" line="24" description="" type="string" variable="$abstract">
            <type>string</type>
          </tag>
          <tag name="param" line="24" description="" type="string" variable="$alias">
            <type>string</type>
          </tag>
          <tag name="return" line="24" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$alias</name>
          <default/>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="33" package="Default">
        <name>tag</name>
        <full_name>\Illuminate\Contracts\Container\Container::tag()</full_name>
        <docblock line="33">
          <description>Assign a set of tags to a given binding.</description>
          <long-description/>
          <tag name="param" line="33" description="" type="array|string" variable="$abstracts">
            <type>array</type>
            <type>string</type>
          </tag>
          <tag name="param" line="33" description="" type="array|mixed" variable="$tags">
            <type>array</type>
            <type>mixed</type>
          </tag>
          <tag name="return" line="33" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstracts</name>
          <default/>
          <type>array|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$tags</name>
          <default/>
          <type>array|mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="41" package="Default">
        <name>tagged</name>
        <full_name>\Illuminate\Contracts\Container\Container::tagged()</full_name>
        <docblock line="41">
          <description>Resolve all of the bindings for a given tag.</description>
          <long-description/>
          <tag name="param" line="41" description="" type="array" variable="$tag">
            <type>array</type>
          </tag>
          <tag name="return" line="41" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tag</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="51" package="Default">
        <name>bind</name>
        <full_name>\Illuminate\Contracts\Container\Container::bind()</full_name>
        <docblock line="51">
          <description>Register a binding with the container.</description>
          <long-description/>
          <tag name="param" line="51" description="" type="string|array" variable="$abstract">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="param" line="51" description="" type="\Closure|string|null" variable="$concrete">
            <type>\Closure</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="51" description="" type="boolean" variable="$shared">
            <type>boolean</type>
          </tag>
          <tag name="return" line="51" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$concrete</name>
          <default>null</default>
          <type>\Closure|string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$shared</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="61" package="Default">
        <name>bindIf</name>
        <full_name>\Illuminate\Contracts\Container\Container::bindIf()</full_name>
        <docblock line="61">
          <description>Register a binding if it hasn't already been registered.</description>
          <long-description/>
          <tag name="param" line="61" description="" type="string" variable="$abstract">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="" type="\Closure|string|null" variable="$concrete">
            <type>\Closure</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="61" description="" type="boolean" variable="$shared">
            <type>boolean</type>
          </tag>
          <tag name="return" line="61" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$concrete</name>
          <default>null</default>
          <type>\Closure|string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$shared</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="70" package="Default">
        <name>singleton</name>
        <full_name>\Illuminate\Contracts\Container\Container::singleton()</full_name>
        <docblock line="70">
          <description>Register a shared binding in the container.</description>
          <long-description/>
          <tag name="param" line="70" description="" type="string|array" variable="$abstract">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="param" line="70" description="" type="\Closure|string|null" variable="$concrete">
            <type>\Closure</type>
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="70" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$concrete</name>
          <default>null</default>
          <type>\Closure|string|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="81" package="Default">
        <name>extend</name>
        <full_name>\Illuminate\Contracts\Container\Container::extend()</full_name>
        <docblock line="81">
          <description>"Extend" an abstract type in the container.</description>
          <long-description/>
          <tag name="param" line="81" description="" type="string" variable="$abstract">
            <type>string</type>
          </tag>
          <tag name="param" line="81" description="" type="\Closure" variable="$closure">
            <type>\Closure</type>
          </tag>
          <tag name="return" line="81" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="throws" line="81" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default/>
          <type>\Closure</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="90" package="Default">
        <name>instance</name>
        <full_name>\Illuminate\Contracts\Container\Container::instance()</full_name>
        <docblock line="90">
          <description>Register an existing instance as shared in the container.</description>
          <long-description/>
          <tag name="param" line="90" description="" type="string" variable="$abstract">
            <type>string</type>
          </tag>
          <tag name="param" line="90" description="" type="mixed" variable="$instance">
            <type>mixed</type>
          </tag>
          <tag name="return" line="90" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$instance</name>
          <default/>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="98" package="Default">
        <name>when</name>
        <full_name>\Illuminate\Contracts\Container\Container::when()</full_name>
        <docblock line="98">
          <description>Define a contextual binding.</description>
          <long-description/>
          <tag name="param" line="98" description="" type="string" variable="$concrete">
            <type>string</type>
          </tag>
          <tag name="return" line="98" description="" type="\Illuminate\Contracts\Container\ContextualBindingBuilder">
            <type>\Illuminate\Contracts\Container\ContextualBindingBuilder</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$concrete</name>
          <default/>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="107" package="Default">
        <name>make</name>
        <full_name>\Illuminate\Contracts\Container\Container::make()</full_name>
        <docblock line="107">
          <description>Resolve the given type from the container.</description>
          <long-description/>
          <tag name="param" line="107" description="" type="string" variable="$abstract">
            <type>string</type>
          </tag>
          <tag name="param" line="107" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="107" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="117" package="Default">
        <name>call</name>
        <full_name>\Illuminate\Contracts\Container\Container::call()</full_name>
        <docblock line="117">
          <description>Call the given Closure / class@method and inject its dependencies.</description>
          <long-description/>
          <tag name="param" line="117" description="" type="callable|string" variable="$callback">
            <type>callable</type>
            <type>string</type>
          </tag>
          <tag name="param" line="117" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="117" description="" type="string|null" variable="$defaultMethod">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="return" line="117" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default/>
          <type>callable|string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultMethod</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="125" package="Default">
        <name>resolved</name>
        <full_name>\Illuminate\Contracts\Container\Container::resolved()</full_name>
        <docblock line="125">
          <description>Determine if the given abstract type has been resolved.</description>
          <long-description/>
          <tag name="param" line="125" description="" type="string" variable="$abstract">
            <type>string</type>
          </tag>
          <tag name="return" line="125" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="134" package="Default">
        <name>resolving</name>
        <full_name>\Illuminate\Contracts\Container\Container::resolving()</full_name>
        <docblock line="134">
          <description>Register a new resolving callback.</description>
          <long-description/>
          <tag name="param" line="134" description="" type="string" variable="$abstract">
            <type>string</type>
          </tag>
          <tag name="param" line="134" description="" type="\Closure|null" variable="$callback">
            <type>\Closure</type>
            <type>null</type>
          </tag>
          <tag name="return" line="134" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default>null</default>
          <type>\Closure|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Illuminate\Contracts\Container" line="143" package="Default">
        <name>afterResolving</name>
        <full_name>\Illuminate\Contracts\Container\Container::afterResolving()</full_name>
        <docblock line="143">
          <description>Register a new after resolving callback.</description>
          <long-description/>
          <tag name="param" line="143" description="" type="string" variable="$abstract">
            <type>string</type>
          </tag>
          <tag name="param" line="143" description="" type="\Closure|null" variable="$callback">
            <type>\Closure</type>
            <type>null</type>
          </tag>
          <tag name="return" line="143" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$abstract</name>
          <default/>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default>null</default>
          <type>\Closure|null</type>
        </argument>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="7" code="PPC:ERR-50009">No summary for interface ""</error>
    </parse_markers>
    <source>eJzNVs1unDAQvu9TjKKVmkbR5gHaqvk95NBLrt0eDAzgxtjINruJmr57x8ZmswTYEEVKuWCMZ+b75tdfv9dlvVhIVqGpWYpwK0RTccksrq+UtJql1vgV4xL1l8WiMQhXQplGI31xaVHnTrA7s/izAHrOTk78G07gGukQKUXgOdgSoeAblMAS4/WDfawRSmYgQdpOVCOzVZCNKs5rplkFQBJcFgDLKNwd0Ggb7aSVCHtn/l03ieAp5I1MLVdB/XEn/5lI9OBeCE5YWAvLKlplPM9Ro7TgHDUf24sDzkIf+UbxbBK5l9ohPw16hhgYwwsSAIMWFPmcFaZl0no+4TIjJGNEmNbs8ekFHTN8ruIPmNH+arVaOkOzeZHQjpUhWk7LAKs7NEpskPwgPClKpEDEQK50x47EJ5mBt9CH6X8dwlkgpQ69B9EV3FCeE4yACrbclh5mGmtjOnWeIryxBFqHwguxeZINuQKWpD4lFtg/7mqBfpuSacxmh8Wx2Mu2aAa+gTN8GjXTd86Ewdc5hVoAt67a5SdLodTIsse28HU4jG+o/o9y0G3+ji4KZztPyQ9JntfSN6REoFVyygMDhI9uHizK7AhYfwTMI+z2DpJ1BNvVBL/uly212hpY38oNtdbsQhdNRV3/5iHF2nGe9Ad6Ws+dETFECJPRdwpo2QbeWCZpptIYCjkx1zWjjondehmNzI57FNwLe9wcoHiNuRv9zIMnJzVMHBpAHYux5FxPX1P8qjV12Vq6bLjI6G4yRWxbIuVyNDkxgHZXGJ+2uVbVO0Un1DAs/be7Nr0Ypz6Akzwqdr8XnFbpM5VUmz9/DfC7cpN1Ry6m7xmkghlzTsKlyihTXTr+Rqpabg1kWFPao0w5mjHeKSlmicDdncLtJCy9HxvQA/z3u13oXhnmrBH2h4c231UOxnEHZsxVpz07471t3k1Xt/l0aNy9/a4bDUxed58NIInbIOPsRre8Qxvuhk0/7K9tOh2q4f4a1I4HpkeS5W79f1L12O5m8v27+AfT7SJk</source>
  <type>interface</type></file>